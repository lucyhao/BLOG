<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hao Li</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lucyhao.com/"/>
  <updated>2018-06-20T08:50:07.327Z</updated>
  <id>http://lucyhao.com/</id>
  
  <author>
    <name>Hao Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node的file模块</title>
    <link href="http://lucyhao.com/2018/06/12/Node%E7%9A%84fs%E6%A8%A1%E5%9D%97/"/>
    <id>http://lucyhao.com/2018/06/12/Node的fs模块/</id>
    <published>2018-06-12T07:58:39.000Z</published>
    <updated>2018-06-20T08:50:07.327Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>算是用NodeJS操作File的一个练手。Demo: <a href="https://github.com/lucyhao/demo-express-file" target="_blank" rel="noopener">https://github.com/lucyhao/demo-express-file</a><br>后来看了一些别人的文章，发现自己的这个很单薄，还找了一个别人的图，感觉很好的列出来fs模块的API</p></blockquote><image alt="node fs api" src="    http://blog-1255342807.file.myqcloud.com/node_fs.png"></image><h3 id="读文件内容"><a href="#读文件内容" class="headerlink" title="读文件内容"></a>读文件内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>); <span class="comment">//引入fs模块</span></span><br><span class="line"><span class="comment">//filePath -&gt; files文件的路径</span></span><br><span class="line"><span class="keyword">let</span> rstream = fs.createReadStream(filePath, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="comment">//rstream是一个可读流</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//异步</span></span><br><span class="line">fs.readFile(filePath, <span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//data 是一个buffer数据，读出来的文件内容会在内存中，所以对于大文件，不适合用这个方法</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步</span></span><br><span class="line"><span class="keyword">let</span> file = fs.readFileSync(filePath)</span><br></pre></td></tr></table></figure><p>stream 与 buffer 的区别在于， buffer会把内容缓存在内存中，内存的大小是有限的，所以对于很大的文件，要注意有可能会导致内存放不下的情况。这个时候就要考虑用stream流的方式。结合网络请求，可以用pipe管道的方式，把读到的数据直接pipe给response。如果说用buffer，是先把内容读入到内存中，然后再发送给client。那么stream就是“数据流”，像“水”一样，从server流向client。</p><p>ep:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//express router</span></span><br><span class="line">router.get(<span class="string">'/file/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">let</span> rstream = fs.createReadStream(name, <span class="string">'utf8'</span>);</span><br><span class="line">    rstream.pipe(res);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="写文件内容"><a href="#写文件内容" class="headerlink" title="写文件内容"></a>写文件内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wstream = fs.createWriteStream(filePath, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="comment">//wstream 是一个可写流</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//异步</span></span><br><span class="line">fs.writeFile(filePath, <span class="string">'data'</span>, (err) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The file has been saved!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步</span></span><br><span class="line"><span class="keyword">let</span> file = fs.writeFileSync(filePath)</span><br></pre></td></tr></table></figure><p>用stream创建的可写流，可以与ReadStream一起使用，可读流.pipe(可写流)。writeStream也可以用write()写内容，然后用end()结束。</p><p>ep:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rstream = fs.createReadStream(filePath, <span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">let</span> wstream = fs.createWriteStream(filePath, <span class="string">'utf8'</span>);</span><br><span class="line">rstream.pipe(wstream);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wstream = fs.createWriteStream(filePath, <span class="string">'utf8'</span>);</span><br><span class="line">wstream.write(data);</span><br><span class="line">wstream.end();</span><br></pre></td></tr></table></figure><h3 id="读文件夹"><a href="#读文件夹" class="headerlink" title="读文件夹"></a>读文件夹</h3><p>确切说是读文件夹下面的文件名称. files是文件夹路径下面的文件的名称的array, 不包括’.’和’..’。 同样也是有同步的fs.readdirSync的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filesDir -&gt; files文件夹的路径</span></span><br><span class="line">fs.readdir(filesDir, (err, files) =&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// file name</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.unlink(filePath, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步</span></span><br><span class="line">fs.mkdir(filesDir, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//同步</span></span><br><span class="line">fs.mkdirSync(filesDir);</span><br></pre></td></tr></table></figure><p>当然所有的接口都可以在Node的API文档里面查到，关于fs模块，最应该搞清楚应该就是stream这种数据流了。<br>用一张别人的图<a href="https://medium.freecodecamp.org/node-js-streams-everything-you-need-to-know-c9141306be93" target="_blank" rel="noopener">原文</a>。列举了Node的哪些module是stream的。</p><image alt="node module的stream流模块" src="https://cdn-images-1.medium.com/max/1600/1*lhOvZiDrVbzF8_l8QX3ACw.png"></image><p>HTTP reponses &amp; HTTP request都是stream的。突然就跟之前的文章有了联系<a href="http://lucyhao.com/2017/09/19/node%E7%9A%84http%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/">Node的http处理过程</a></p><p>所以在express中，如果不用中间价，接到的request的data就是stream。我们处理它们的时候，就要使用到事件。<br>所有的stream都是EventEmitter（还没学习，简单理解就是stream都有很多事件来处理）的实例。</p><p>一个例子，处理http request,把数据写到文件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//express router</span></span><br><span class="line">router.put(<span class="string">'/file/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> body = <span class="string">''</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        body += chunk; <span class="comment">//stream的数据是一块chunk一块chunk的</span></span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> wstream = fs.createWriteStream(filepath, <span class="string">'utf8'</span>);</span><br><span class="line">        wstream.write(body);</span><br><span class="line">        wstream.end();</span><br><span class="line">        res.json(&#123;<span class="string">'success'</span> : <span class="string">'already updated file'</span>&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;算是用NodeJS操作File的一个练手。Demo: &lt;a href=&quot;https://github.com/lucyhao/demo-express-file&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git
      
    
    </summary>
    
    
      <category term="Node" scheme="http://lucyhao.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Vue &amp; React 的一些不同（2）</title>
    <link href="http://lucyhao.com/2018/05/28/Vue%20&amp;%20React%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%90%8C(2)/"/>
    <id>http://lucyhao.com/2018/05/28/Vue &amp; React的一些不同(2)/</id>
    <published>2018-05-28T06:36:11.000Z</published>
    <updated>2018-06-20T02:00:32.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://drive.google.com/drive/u/1/folders/1v0BU3x2V7HvvSYcp-KaarxJGv97MadlA" target="_blank" rel="noopener">Vue &amp; React</a>的sharing ppt</p></blockquote><h3 id="Vue的响应式原理"><a href="#Vue的响应式原理" class="headerlink" title="Vue的响应式原理"></a>Vue的响应式原理</h3><p>Vue:</p><p>Vue的内在，响应式原理部分，官方文档有提到</p><blockquote><p>当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。</p></blockquote><blockquote><p>每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新。</p></blockquote><p>在Vue组件中，对于array和object, 有一些更新方式，不是响应式的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name :<span class="string">''</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      array : [<span class="string">'1'</span>],</span><br><span class="line">      object : &#123;&#125;,</span><br><span class="line">      array1 : [&#123;<span class="attr">active</span>:<span class="literal">false</span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods : &#123;</span><br><span class="line">    update() &#123;</span><br><span class="line">      <span class="keyword">this</span>.array[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 不是响应式的</span></span><br><span class="line">      <span class="keyword">this</span>.object.active = <span class="literal">false</span>; <span class="comment">// 不是响应式的</span></span><br><span class="line">      <span class="keyword">this</span>.array1[<span class="number">0</span>].active = <span class="literal">true</span>; <span class="comment">//是响应式的</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因与Vue的实现方式相关。Vue对Object遍历它的每一项，用Object.defineProperty去设置get,set。而对于array, 重写;[‘push’,’pop’,’shift’,’unshift’,’splice’,’sort’,’reverse’]这几个array的方法，对其中的每一项增加watcher.</p><p>所以对于object, 直接往里面添加属性，不是响应式的；对于array, 直接修改里面的值也不是响应式的；而array[{object}],这种object的每个属性都做了get,set；所以改变它是响应式的。</p><p>在调试的时候，把对象console.log出来，看看有没有set, get就知道这个属性是否是响应式的。</p><p>一个小例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="string">"name"</span>:<span class="string">"li"</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"name"</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    set : <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>)</span>&#123;</span><br><span class="line">    value = newVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.name = <span class="string">"lili"</span>;</span><br><span class="line">obj.age = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">console出来的内容：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;age:12&#125;</span></span><br><span class="line"><span class="comment">  age:12</span></span><br><span class="line"><span class="comment">  name:(...)    //"lili"</span></span><br><span class="line"><span class="comment">  get name : f ()</span></span><br><span class="line"><span class="comment">  set name : f (newVal)</span></span><br><span class="line"><span class="comment">  __proto__: Object</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Vue的响应式原理部分，同时也是它的双向数据流的原理。而React的是单向数据流。在<a href="http://lucyhao.com/2018/04/13/Vue%20&amp;%20React%20%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%90%8C/">Vue &amp; React的一些不同</a>里面有提到</p><h3 id="React新手的一种编码误区"><a href="#React新手的一种编码误区" class="headerlink" title="React新手的一种编码误区"></a>React新手的一种编码误区</h3><p>Dan(React之父)在他的twitter里面有写到<a href="(http://lucyhao.com/2018/04/13/Vue%20&amp;%20React%20%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%90%8C/">一些新手写React的思想</a>).</p><ul><li><p>如果你的components把接收到的props赋值给了state, 然后尝试通过接收到不同的props来改变state; 那么你就要好好想象这样做的必要性。是不是应该直接用props，把state给删除了。</p></li><li><p>还举了一个例子<colorpalette> 来说明，这个例子是很“稀有”的需要在组件内用state来接props的。</colorpalette></p></li><li><p>对很多React的新手来说，他们的想法是“我需要在组件内部使用一些数据，这些数据来自于外部（父元素），那么我需要copy这些数据到组件内部”。这种想法是不对的。应该把state提升到父组件里面去使用。<a href="https://reactjs.org/docs/lifting-state-up.html" target="_blank" rel="noopener">Lifting State Up - React</a></p></li></ul><p>我觉得这种写React代码的方法不仅适用于React，同样也适用于Vue. 对于一个组件，如果它需要根据props来改变它的一些view，同时这个组件可能自己本身也会有一些操作来改变它的view， 那么最好的做法应该是组件接收props，用event来通知parent的props改变。</p><p>example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      show : <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  changeShow(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">show</span>: value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Children1</span><br><span class="line">          show=&#123;<span class="keyword">this</span>.state.show&#125;</span><br><span class="line">          changeShow=&#123;<span class="keyword">this</span>.changeShow.bind(<span class="keyword">this</span>)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">class Children extends Component &#123;</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  handleClose()&#123;</span></span><br><span class="line"><span class="regexp">    this.props.changeShow(false);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    let className = '';</span></span><br><span class="line"><span class="regexp">    if (this.props.show) &#123;</span></span><br><span class="line"><span class="regexp">      className = 'show';</span></span><br><span class="line"><span class="regexp">    &#125;else&#123;</span></span><br><span class="line"><span class="regexp">      className = 'hide'</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div className=&#123;className&#125;&gt;</span></span><br><span class="line"><span class="regexp">        children</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.handleClose.bind(this)&#125;&gt;close&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/drive/u/1/folders/1v0BU3x2V7HvvSYcp-KaarxJGv97MadlA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue &amp;a
      
    
    </summary>
    
    
      <category term="React" scheme="http://lucyhao.com/tags/React/"/>
    
      <category term="Vue" scheme="http://lucyhao.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue &amp; React 的一些不同</title>
    <link href="http://lucyhao.com/2018/04/13/Vue%20&amp;%20React%20%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%90%8C/"/>
    <id>http://lucyhao.com/2018/04/13/Vue &amp; React 的一些不同/</id>
    <published>2018-04-13T04:34:02.000Z</published>
    <updated>2018-05-18T03:29:32.910Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近用Vue做项目，然后呢之前用过React，就觉得应该比较一下他们的不同。不是很全面，完全是从平时工作的时候用到的出发。</p></blockquote><h3 id="component的写法"><a href="#component的写法" class="headerlink" title="component的写法"></a>component的写法</h3><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;!-- Write your HTML <span class="keyword">with</span> Vue <span class="keyword">in</span> here --&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// Write your Vue component logic here</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  /</span>* Write your styles <span class="keyword">for</span> the component <span class="keyword">in</span> here *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"*.css"</span>; <span class="comment">//if you need some css</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YourComponentName</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        <span class="comment">//JSX</span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>Vue对熟悉Jquery开发方式的前端同学更加“友好”,类似的html+css+js的开发，不过这里是template,需要学习一些template的东西；然后css很友好，感觉没有任何变化，js当然是Vue component的方式.<br>React整个更像是Javascript,另外需要学习一下JSX.</p><p>这部分中，常用到的下面三个部分</p><table><thead><tr><th></th><th style="text-align:center">Vue</th><th style="text-align:right">React</th></tr></thead><tbody><tr><td>binging style</td><td style="text-align:center">v-bind:class / v-bind:style (template syntax)</td><td style="text-align:right">className / style={yourStyle}(in JSX)</td></tr><tr><td>handling events</td><td style="text-align:center">v-on:click (template syntax)</td><td style="text-align:right">onClick=”” (in JSX)</td></tr><tr><td>list rendering</td><td style="text-align:center">v-if / v-for (template syntax)</td><td style="text-align:right">if / for (Javascript)</td></tr></tbody></table><h3 id="lifecycle的不同"><a href="#lifecycle的不同" class="headerlink" title="lifecycle的不同"></a>lifecycle的不同</h3><h4 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name : <span class="string">'YourName'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg : <span class="string">"This is your app."</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;&#125;,</span><br><span class="line">  mounted()&#123;&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><image width="500" src="https://vuejs.org/images/lifecycle.png"></image><h4 id="React-1"><a href="#React-1" class="headerlink" title="React"></a>React</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props);</span><br><span class="line">  <span class="keyword">this</span>.state = &#123;</span><br><span class="line">    msg : <span class="string">"This is your app."</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a component is being created and inserted into the DOM</span></span><br><span class="line">componentDidMount()&#123;&#125;<span class="comment">//do ajax request to populate data here</span></span><br><span class="line"></span><br><span class="line">componentWillUnmount()&#123;&#125;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//react 16版本的三个will函数：componentWillMount, componentWillReceiveProps, componentWillUpdate 都会在前面带上UNSAFE_的前缀， 并且version 17之后就会取消这三个hook</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> getDerivedStateFromProps(nextProps, prevState)&#123;&#125;<span class="comment">//当组件实例化/接收到new props的时候</span></span><br><span class="line"></span><br><span class="line">getSnapshotBeforeUpdate(prevProps, prevState) &#123;&#125;<span class="comment">//官方例子，在dom更新之前读取它的属性，获取滚动条的位置</span></span><br></pre></td></tr></table></figure><p><image width="600" src="http://blog-1255342807.file.myqcloud.com/react_lifeflow.jpg"></image><br>当然Vue与React 有不同的lifecycle的hook。Vue多了create阶段的hook, beforeCreate/created。Mount的意思一个组件被创建并且放到DOM中。简单类比React 与 Vue: React的componentDidMount() =&gt; Vue的mounted()。</p><p>有个很大的区别是，vue不建议在这些钩子里面更新组件的状态。因为vue有另外两个地方来更新，computed与watcher</p><blockquote><p>关于这部分，有一个例子，可以能够很好的看出它们的区别</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Parent</span></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">if</span>=<span class="string">"type"</span>&gt;&lt;ChildBlue /&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">else</span>&gt;&lt;ChildRed /&gt;&lt;/div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> ChildBlue <span class="keyword">from</span> <span class="string">"./ChildBlue.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> ChildRed <span class="keyword">from</span> <span class="string">"./ChildRed.vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name : <span class="string">"Parent"</span>,</span><br><span class="line">  components : &#123;</span><br><span class="line">    ChildBlue,</span><br><span class="line">    ChildRed</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      type : <span class="literal">false</span>  <span class="comment">//default 设置的是false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  mounted()&#123;</span></span><br><span class="line"><span class="comment">    this.type = true; //</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ChildBlue.vue 随便是什么</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ChildRed.vue</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="red"&gt;type is red&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default &#123;</span></span><br><span class="line"><span class="regexp">    name : 'ChildRed',</span></span><br><span class="line"><span class="regexp">    beforeCreate() &#123;</span></span><br><span class="line"><span class="regexp">      this.timer = setTimeout(function()&#123;</span></span><br><span class="line"><span class="regexp">        alert("before create red!")</span></span><br><span class="line"><span class="regexp">      &#125;,1000)</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    created() &#123;</span></span><br><span class="line"><span class="regexp">      this.timer = setTimeout(function()&#123;</span></span><br><span class="line"><span class="regexp">        alert("create red!")</span></span><br><span class="line"><span class="regexp">      &#125;,1000)</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    mounted() &#123;</span></span><br><span class="line"><span class="regexp">      this.timer = setTimeout(function()&#123;</span></span><br><span class="line"><span class="regexp">        alert("mount red!")</span></span><br><span class="line"><span class="regexp">      &#125;,1000)</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    /</span>*</span><br><span class="line">    beforeDestroy()&#123;</span><br><span class="line">      clearTimeout(<span class="keyword">this</span>.timer)</span><br><span class="line">    &#125;*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.red&#123;</span><br><span class="line">  background-color: red</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><p>Parent.vue 在created阶段改变type的值，那么ChildRed就不会被“创建”，1000ms以后，不会有alert； 如果是在mounted阶段改变type的值，那么ChildRed会经历mounted -&gt; destroyed的过程，如果没有在destroy阶段clear timer,那么在1000ms以后，就会看到alert</p><hr><p>React 没有created的阶段，所以记得一定在unmount阶段，clear timer / removeEventListener 等操作</p><h3 id="更新状态的不同"><a href="#更新状态的不同" class="headerlink" title="更新状态的不同"></a>更新状态的不同</h3><h4 id="Vue-1"><a href="#Vue-1" class="headerlink" title="Vue"></a>Vue</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">computed: &#123;&#125;<span class="comment">//这里面是计算属性，只有需要re-rendering的时候才会调用；对应的属性变化的时候，计算属性也会跟着变化；属性就是data里面的内容</span></span><br><span class="line">methods : &#123;&#125;<span class="comment">//这里面的方法，任何时候都会调用，不管是否会re-rendering</span></span><br><span class="line">watcher : &#123;&#125;<span class="comment">//大多数时候，能用computed计算属性的都不用watcher. 除非：This is most useful when you want to perform asynchronous or expensive operations in response to changing data. （异步操作/比较重的操作 来改变数据的时候）</span></span><br></pre></td></tr></table></figure><h4 id="React-2"><a href="#React-2" class="headerlink" title="React"></a>React</h4><p>setState(updater[, callback])  任何时候要改变一个component的状态的时候，都是用的setState(). ps: setState()是异步的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><h4 id="Vue-v-model-双向数据绑定"><a href="#Vue-v-model-双向数据绑定" class="headerlink" title="Vue v-model 双向数据绑定"></a>Vue v-model 双向数据绑定</h4><p>在表单控件上，可以直接使用v-modal来实现双向数据绑定。官方解释v-modal其实就是使用用户输入事件，加上对边界条件的特殊处理的语法糖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input v-model=<span class="string">"searchText"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"></span><br><span class="line">&lt;input</span><br><span class="line">  v-bind:value=<span class="string">"searchText"</span></span><br><span class="line">  v-on:input=<span class="string">"searchText = $event.target.value"</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>一个input的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input v-model=<span class="string">"message"</span> placeholder=<span class="string">"edit me"</span>&gt;</span><br><span class="line">  &lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><h4 id="React-单向数据流"><a href="#React-单向数据流" class="headerlink" title="React 单向数据流"></a>React 单向数据流</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YourComponentName</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">value</span>: <span class="string">''</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &lt;input type=<span class="string">"text"</span> value=&#123;<span class="keyword">this</span>.state.value&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">          &lt;p&gt;Message is: &#123;<span class="keyword">this</span>.state.value&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单从这点来看，vue更灵活，代码更少（因为其实都帮你做了处理了）。React 需要写更多的代码，但个人觉得，反而感觉react更简单 一些（理解加使用的时候，更容易清楚数据的来龙去脉）。不过对于UI组件来说，React的单向数据流肯定就会导致写很多代码。</p><hr><h3 id="“Layout”的构造"><a href="#“Layout”的构造" class="headerlink" title="“Layout”的构造"></a>“Layout”的构造</h3><h4 id="React-可以利用props"><a href="#React-可以利用props" class="headerlink" title="React 可以利用props"></a>React 可以利用props</h4><p>example : <a href="https://codepen.io/gaearon/pen/gwZOJp?editors=0010" target="_blank" rel="noopener">https://codepen.io/gaearon/pen/gwZOJp?editors=0010</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SplitPane</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"SplitPane"</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">"SplitPane-left"</span>&gt;</span><br><span class="line">        &#123;props.left&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="SplitPane-right"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;props.right&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;SplitPane</span></span><br><span class="line"><span class="regexp">      left=&#123;</span></span><br><span class="line"><span class="regexp">        &lt;Contacts /</span>&gt;</span><br><span class="line">      &#125;</span><br><span class="line">      right=&#123;</span><br><span class="line">        &lt;Chat /&gt;</span><br><span class="line">      &#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Vue-可以利用slot"><a href="#Vue-可以利用slot" class="headerlink" title="Vue 可以利用slot"></a>Vue 可以利用slot</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//base-layout.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;slot name=<span class="string">"header"</span>&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    &lt;main&gt;</span></span><br><span class="line"><span class="regexp">      &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class="line">    &lt;<span class="regexp">/main&gt;</span></span><br><span class="line"><span class="regexp">    &lt;footer&gt;</span></span><br><span class="line"><span class="regexp">      &lt;slot name="footer"&gt;&lt;/</span>slot&gt;</span><br><span class="line">    &lt;<span class="regexp">/footer&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/feature.vue</span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;base-layout&gt;</span></span><br><span class="line"><span class="regexp">    &lt;template slot="header"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1&gt;Here might be a page title&lt;/</span>h1&gt;</span><br><span class="line">    &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;p&gt;A paragraph for the main content.&lt;/</span>p&gt;</span><br><span class="line">    &lt;p&gt;And another one.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;template slot="footer"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;Here is some contact info&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>base-layout&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  export default &#123;</span></span><br><span class="line"><span class="regexp">    name : "Feature",</span></span><br><span class="line"><span class="regexp">    components : &#123;</span></span><br><span class="line"><span class="regexp">      baseLayout</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><h4 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近用Vue做项目，然后呢之前用过React，就觉得应该比较一下他们的不同。不是很全面，完全是从平时工作的时候用到的出发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;component的写法&quot;&gt;&lt;a href=&quot;#component的写法
      
    
    </summary>
    
    
      <category term="React" scheme="http://lucyhao.com/tags/React/"/>
    
      <category term="Vue" scheme="http://lucyhao.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>利用JavaScript获取图片的Exif信息</title>
    <link href="http://lucyhao.com/2017/10/24/%E5%88%A9%E7%94%A8JavaScript%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E7%9A%84Exif%E4%BF%A1%E6%81%AF/"/>
    <id>http://lucyhao.com/2017/10/24/利用JavaScript获取图片的Exif信息/</id>
    <published>2017-10-24T07:48:06.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近做有关图片的工作，发现在浏览器中显示正常的图片。在自己的项目中，上传之后用canvas显示出来就是sideway的形式。依稀记得图片本身有带它的原始方向的信息，到网上查阅资料，获取到了很多有用的信息。好像还没有中文的翻译。所以就准备整理出来，方便自己也是方便其他同学学习～</p></blockquote><hr><h1 id="stackoverflow"><a href="#stackoverflow" class="headerlink" title="stackoverflow"></a>stackoverflow</h1><p>(1)</p><p><a href="https://stackoverflow.com/questions/20600800/js-client-side-exif-orientation-rotate-and-mirror-jpeg-images/31273162#31273162" target="_blank" rel="noopener">stackoverflow上有个关于这个问题的总结</a>：</p><p>数字相片通常被保存成带有EXIF方向信息的JPEG格式。为了能够正确的显示照片，照片就需要根据它的方向信息进行旋转／镜像处理，在网页的html代码中直接放上图片，可以看到显示是有问题的。就算是在商业的web app中，对EXIF的方向的支持也是参差不齐的，见<a href="https://www.daveperrett.com/articles/2012/07/28/exif-orientation-handling-is-a-ghetto/" target="_blank" rel="noopener">文章</a>。一张JPEG照片可能包含如下8种方向信息:</p><image width="400" src="http://blog-1255342807.cossgp.myqcloud.com/6cJTP.gif" alt="Summary of EXIF Orientation"></image><p>在<a href="http://www.galloway.me.uk/2012/01/uiimageorientation-exif-orientation-sample-images/" target="_blank" rel="noopener">博客</a>中提供了一种简单的实现方式，带示例。</p><p><strong>我们的问题是如何在客户端旋转／镜像图片才能正确的显示，并且能够不影响后续的处理？</strong></p><p>有一个<a href="https://github.com/exif-js/exif-js" target="_blank" rel="noopener">JS的库exif-js</a>可以解析EXIT数据，包括方向的属性。Flickr在他们的技术博客中还提到了解析数据量大的照片的性能问题，推荐使用webworkers，见<a href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/" target="_blank" rel="noopener">文章</a>(下面会翻译这个文章)。</p><p><a href="https://superuser.com/questions/36645/how-to-rotate-images-automatically-based-on-exif-data" target="_blank" rel="noopener">Console工具能够正确的显示照片</a>。另外还有一个php的脚本也解决了这个问题(注释：连接已失效；因为这个问题其实是很老的问题，这些回答也都是12年左右的。)</p><p>(2)</p><p>github的项目<a href="https://github.com/blueimp/JavaScript-Load-Image" target="_blank" rel="noopener">JavaScript-Load-Image</a> 提供了完整的关于获取EXIF信息的解决方案。</p><p>(3)<br>fiddle上有关于只需要简单获取图片的方向信息并对图片做Transform的代码。<a href="https://jsfiddle.net/wunderbart/dtwkfjpg/" target="_blank" rel="noopener">获取图片的方向信息</a>。<a href="https://jsfiddle.net/wunderbart/w1hw5kv1/" target="_blank" rel="noopener">正确显示带方向信息的图片,canvas方式</a></p><hr><h1 id="Flickr"><a href="#Flickr" class="headerlink" title="Flickr"></a>Flickr</h1><p>上面提到了Flickr的技术文章有介绍，讲解的很详细，有必要整理出来（原始的文章也是12年的老文章啦）。</p><h3 id="什么是Exif"><a href="#什么是Exif" class="headerlink" title="什么是Exif"></a>什么是Exif</h3><p>Exif是Exchangeable image file format的缩写。是一种标准，用在数字产品中包括照片，声音等。文章描述的是在照片中使用的标准的标示。</p><h3 id="Flickr现在是如何解析Exif数据的呢"><a href="#Flickr现在是如何解析Exif数据的呢" class="headerlink" title="Flickr现在是如何解析Exif数据的呢"></a>Flickr现在是如何解析Exif数据的呢</h3><p>现在我们是在图片上传到Flickr的服务器后才解析的，然后把数据显示在照片的metadata页面上<a href="https://www.flickr.com/photos/rubixdead/7192796744/meta/in/photostream" target="_blank" rel="noopener">https://www.flickr.com/photos/rubixdead/7192796744/meta/in/photostream</a>。这个页面显示了相机记录的照片的所有信息，包括相机的类型，图片的大小，曝光设置等。我们现在使用的是ExifTool<a href="http://www.sno.phy.queensu.ca/~phil/exiftool/" target="_blank" rel="noopener">http://www.sno.phy.queensu.ca/~phil/exiftool/</a> 这个工具来解析数据。不过这个工具是在服务端的，一个可以自动运行的解决方案。</p><h3 id="在客户端解析Exif数据的时机"><a href="#在客户端解析Exif数据的时机" class="headerlink" title="在客户端解析Exif数据的时机"></a>在客户端解析Exif数据的时机</h3><p>在一次的“上传项目”中，我们发现现代的浏览器可以直接从磁盘中读取照片的数据，直接使用FileReader API(<a href="http://www.w3.org/TR/FileAPI/#FileReader-interface" target="_blank" rel="noopener">http://www.w3.org/TR/FileAPI/#FileReader-interface</a>)。这让我们意识到，我们可以在照片被上传之前就解析Exif数据。在用户编辑照片的时候，点击上传按钮之前就给她们展示这些信息。</p><h3 id="为什么要在客户端做Exif的数据解析呢"><a href="#为什么要在客户端做Exif的数据解析呢" class="headerlink" title="为什么要在客户端做Exif的数据解析呢"></a>为什么要在客户端做Exif的数据解析呢</h3><p>既然我们已经在服务端做了Exif的数据解析了，为什么还要考虑在客户端做这个事情呢？因为在客户端解析既快又有效率。这样就可以给用户展示缩略图而不需要在DOM中加载整个图片了（这会耗费掉大量的内存，也回影响性能）。用户也可以在第三方的应用中给照片添加标题，描述，标签等，同同时把这些信息保存到Exif数据中。当用户上传照片的时候，我们就能够给用户展示这些信息了。</p><h3 id="使用Web-Workers"><a href="#使用Web-Workers" class="headerlink" title="使用Web Workers"></a>使用Web Workers</h3><p>我们一开始利用JavaScript读取文件的字节信息做了一些测试和研究。发现很少有人利用这种方式来实现（注：这是12年的文章），这种方式不难，但是比较麻烦。很快我们就发现用这种方式的话，用户的浏览器在跑一个10Mb的数据的时候就会处理的很慢了。Web workers可以让我们把要解析的字节数据放到一个独立的cpu线程中去。这样可以释放掉用户的浏览器，当解析Exif的数据的时候，浏览器就可以继续使用上传功能（不会因为需要大量处理解析的任务而卡住）。</p><h3 id="Exif处理流"><a href="#Exif处理流" class="headerlink" title="Exif处理流"></a>Exif处理流</h3><p>第一件事情就是先开一个web worker的线程。当用户添加一张照片的时候，我们就可以创建事件来处理了。当web worker调用postMessage()事件的时候，我们捕获到这个事件，然后解析Exif数据展示到页面上。其他的工作在这个时候也可以同时处理了，比如解析xmp数据，因为DOM在worker的线程中是不能使用的。</p><p>使用Blob.slice()函数，我们可以只用把前128kb的数据给web worker处理，这样可以加快速度。因为Exif数据是保存在前64kb中的，但是iptc有时候也会超过这个限制，特别是xmp标准来组织信息的时候。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file.slice) &#123;</span><br><span class="line">    filePart = file.slice(<span class="number">0</span>, <span class="number">131072</span>);<span class="comment">//128*1024 b</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.webkitSlice) &#123;</span><br><span class="line">    filePart = file.webkitSlice(<span class="number">0</span>, <span class="number">131072</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.mozSlice) &#123;</span><br><span class="line">    filePart = file.mozSlice(<span class="number">0</span>, <span class="number">131072</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    filePart = file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们创建了一个FileReader对象，传给Blob来读取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">binaryReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">binaryReader.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//这里处理读取到的数据，并传给worker</span></span><br><span class="line">    worker.postMessage(&#123;</span><br><span class="line">        guid: guid,</span><br><span class="line">        binary_string: binaryReader.result</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">binaryReader.readAsBinaryString(filePart);<span class="comment">//这里读取的是二进制的slice数据</span></span><br></pre></td></tr></table></figure><p>Worker接收到二进制的字符串，把它传递给不同的Exif处理器。一个用来处理Exif的数据，一个用来处理XMP形式的IPTC数据，一个用来处理没有形式的IPTC数据。每一个处理器都使用postMessage()函数把处理后的Exif数据返回给主模块。这些返回的数据，会在后续的上传api的中一起整合上传到后端。</p><h3 id="异步处理Exif的解析"><a href="#异步处理Exif的解析" class="headerlink" title="异步处理Exif的解析"></a>异步处理Exif的解析</h3><p>当异步处理Exif的数据的时候，我们不能及时的得到信息。还得阻止用户来对照片进行排序等操作，直到Exif数据被解析完，时间被标示好。（因为Filckr的一个功能就是对照片添加标签等，所以这里还讲到了一些标签的问题）。</p><h3 id="The-Nitty-Gritty-创建Exif解析器，处理数组"><a href="#The-Nitty-Gritty-创建Exif解析器，处理数组" class="headerlink" title="The Nitty Gritty: 创建Exif解析器，处理数组"></a>The Nitty Gritty: 创建Exif解析器，处理数组</h3><p>创建一个Exif的解析器不难，但是需要考虑一些事情：</p><ul><li>哪些Exif信息是我们需要处理的?(Exif, XMP, IPTC, 其他情况 还是 所有情况？)</li><li>处理二进制字符的时候，是低字节序还是高字节序？</li><li>如何在浏览器中读取二进制数据？</li><li>已有的类型数组还是需要自己创建自己的数据结构？</li></ul><hr><h4 id="读取二进制数据"><a href="#读取二进制数据" class="headerlink" title="读取二进制数据"></a>读取二进制数据</h4><p><em>接下来这里详细介绍了照片的二进制数据的头信息中，每个字节表示的含义，另外因为文章解析了Exif的很多数据，所以考虑的比较多，代码也比较长，决定用一个简单的例子，整合上文章中的原理来说明。其中例子来源于<a href="https://jsfiddle.net/wunderbart/dtwkfjpg/" target="_blank" rel="noopener">https://jsfiddle.net/wunderbart/dtwkfjpg/</a>,只获取了Exif中的方向信。ps:下面的顺序是按照倒叙来叙述的，先给程序，然后再到原理…</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOrientation</span>(<span class="params">file, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(event.target.result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (view.getUint16(<span class="number">0</span>, <span class="literal">false</span>) != <span class="number">0xFFD8</span>) <span class="keyword">return</span> callback(<span class="number">-2</span>); <span class="comment">//SOI 表示图片的开始</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> length = view.byteLength,</span><br><span class="line">        offset = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (offset &lt; length) &#123;</span><br><span class="line">      <span class="keyword">var</span> marker = view.getUint16(offset, <span class="literal">false</span>);<span class="comment">//offset=2</span></span><br><span class="line">      offset += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//offset = 4</span></span><br><span class="line">      <span class="keyword">if</span> (marker == <span class="number">0xFFE1</span>) &#123;<span class="comment">//APP1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (view.getUint32(offset += <span class="number">2</span>, <span class="literal">false</span>) != <span class="number">0x45786966</span>) &#123; <span class="comment">//Exif标志 offset=6</span></span><br><span class="line">          <span class="keyword">return</span> callback(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> little = view.getUint16(offset += <span class="number">6</span>, <span class="literal">false</span>) == <span class="number">0x4949</span>;<span class="comment">//低字节方式是true还是false</span></span><br><span class="line">        offset += view.getUint32(offset + <span class="number">4</span>, little);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//offset = 20 Dir.Entries的位置</span></span><br><span class="line">        <span class="keyword">var</span> tags = view.getUint16(offset, little);<span class="comment">//获取总共有多少个IFD</span></span><br><span class="line">        offset += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每个IFD 是12字节长</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tags; i++)</span><br><span class="line">          <span class="keyword">if</span> (view.getUint16(offset + (i * <span class="number">12</span>), little) == <span class="number">0x0112</span>)<span class="comment">//0112是IFD中标签表示orientation</span></span><br><span class="line">            <span class="keyword">return</span> callback(view.getUint16(offset + (i * <span class="number">12</span>) + <span class="number">8</span>, little));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ((marker &amp; <span class="number">0xFF00</span>) != <span class="number">0xFF00</span>) <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">else</span> offset += view.getUint16(offset, <span class="literal">false</span>); <span class="comment">//直到找到APP1才是我们要的信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  reader.readAsArrayBuffer(file.slice(<span class="number">0</span>, <span class="number">64</span> * <span class="number">1024</span>));<span class="comment">//读取的是前64Kb的数据，二进制字符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下图所示的一个图片的前48字节的信息，分成了2个字节一组，一行12个字节的展示：</p><image width="500" src="http://farm9.staticflickr.com/8009/7315733860_d8288b3607_o.gif"></image><p>注意与上面程序的对应：</p><ul><li>SOI: 表示图片的开始，第0字节开始，长2个字节的值 ＝ 0xFFD8</li><li>APP1: 第2个字节开始, 长2个字节的值（offset=2, getUint16()）= 0xFFE1</li><li>Exif的标志: 第6字节开始，长4个字节的值＝0x45786966</li><li>little endian : 低字节的存储方式字段，第12字节开始＝0x4949</li><li>Dir. Entries : 有多少个IFD, 第20字节开始，2个字节的数值</li><li>接着就是IFD的信息，每个IFD信息总共12个字节，前2字节表示这个IFD的tag, 这个IFD中的第8个字节内容表示数据／地址；例如上图的第一个IFD信息的，前2个字节是0x0E01,表示“图片的描述”，0x9E00表示了这块数据的位置。 程序中，就是读取tag是0x0112表示这块IFD信息是orientation方向数据，然后读取第8个字节的内容得到orientation的信息。</li></ul><p>来看下标准JPEG照片的数据信息结构：</p><p><image width="500" src="http://farm9.staticflickr.com/8002/7315733808_6dcfd91f88_o.gif" alt="Basic Structure of Compressed Data Files"></image><br>如图所示，注意对照上面程序里面读取的内容，APP1部分包括了APP1的标记，Exif标志等。在JPEG标准中，APP1包括的所有的信息内容不超过64Kb。TIFF结构中包括了文件头信息，最多两个IFD。第一个IFD记录的是主图片的信息。第二个IFD记录的是缩略图的信息。关于IFD的信息如下图：</p><p><image width="500" src="http://farm9.staticflickr.com/8024/7315733770_7a850b8cb6_o.gif"></image><br>头信息过了就是Directory Entries的数量，每12字节是一个Dir. Entry的入口，在每一个Directory Entry中的第8字节是value/offset。</p><h2 id="这样我们就能够解析Exif信息，找到需要的信息啦～"><a href="#这样我们就能够解析Exif信息，找到需要的信息啦～" class="headerlink" title="这样我们就能够解析Exif信息，找到需要的信息啦～"></a>这样我们就能够解析Exif信息，找到需要的信息啦～</h2><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>在解析照片的Exif信息的主要步骤：</p><ol><li>初始化web worker</li><li>获取文件的引用</li><li>获取文件的一部分信息（Blob slice,还记得不，只需要读取前128kb的数据）</li><li>读取二进制字符信息</li><li>找到APP1/APP0的标志</li><li>找到Exif和TIFF的头标志</li><li>找到IFD0和IFD1</li><li>处理程序进入到IFD0和IFD1</li><li>解析的数据返回给worker</li></ol><p>这就是读取Exif的完整步骤啦！麻烦的问题就在于各种相机的不同，产生的照片的格式也会随着时间有所变化。</p><p>最后的注意：Web workers使得在客户端处理Exif信息变得可行。类似于这样的任务不使用web workers也同样可以，但是在运行任务的时候就会锁住UI线程 —— 对于web app来说，特别是还要去用户有交互的web app，这显然不是一个理想的方案。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近做有关图片的工作，发现在浏览器中显示正常的图片。在自己的项目中，上传之后用canvas显示出来就是sideway的形式。依稀记得图片本身有带它的原始方向的信息，到网上查阅资料，获取到了很多有用的信息。好像还没有中文的翻译。所以就准备整理出来，方
      
    
    </summary>
    
      <category term="前端开发" scheme="http://lucyhao.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="http://lucyhao.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Node的http处理过程</title>
    <link href="http://lucyhao.com/2017/09/19/node%E7%9A%84http%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/"/>
    <id>http://lucyhao.com/2017/09/19/node的http处理过程/</id>
    <published>2017-09-19T12:44:28.000Z</published>
    <updated>2018-06-25T02:19:11.806Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>问题： express，使用了中间件body-parser；在接收POST/PUT这类请求的时候，请求中有data数据，使用node的http模块，pipe不成功。</p></blockquote><p>一： 首先要先了解node中http的处理过程，原文<a href="https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#anatomy-of-an-http-transaction。翻译过来的意思是这样的（非逐字翻译）" target="_blank" rel="noopener">https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#anatomy-of-an-http-transaction。翻译过来的意思是这样的（非逐字翻译）</a></p><p>我们在node端做一个服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; headers, method, url &#125; = request;<span class="comment">//1</span></span><br><span class="line">  <span class="keyword">let</span> body = [];</span><br><span class="line">  request.on(<span class="string">'error'</span>, (err) =&gt; &#123;<span class="comment">//4</span></span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;).on(<span class="string">'data'</span>, (chunk) =&gt; &#123;</span><br><span class="line">    body.push(chunk); <span class="comment">//2</span></span><br><span class="line">  &#125;).on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    body = Buffer.concat(body).toString();<span class="comment">//3</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// BEGINNING OF NEW STUFF</span></span><br><span class="line"></span><br><span class="line">    response.on(<span class="string">'error'</span>, (err) =&gt; &#123;<span class="comment">//7</span></span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    response.statusCode = <span class="number">200</span>;</span><br><span class="line">    response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>); <span class="comment">//5</span></span><br><span class="line">    <span class="comment">// Note: 上面的两行可以用下面这一行代替</span></span><br><span class="line">    <span class="comment">// response.writeHead(200, &#123;'Content-Type': 'application/json'&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> responseBody = &#123; headers, method, url, body &#125;;</span><br><span class="line"></span><br><span class="line">    response.write(<span class="built_in">JSON</span>.stringify(responseBody));<span class="comment">//6</span></span><br><span class="line">    response.end();</span><br><span class="line">    <span class="comment">// Note: 上面的两行可以用下面这一行代替</span></span><br><span class="line">    <span class="comment">// response.end(JSON.stringify(responseBody))</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// END OF NEW STUFF</span></span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(<span class="number">8080</span>); <span class="comment">// 激活server,监听端口8080.</span></span><br></pre></td></tr></table></figure><ul><li>1: 我们得到请求的headers,method,url. request对象是一个IncomingMessage对象的实例。method是一个通常的http请求的method；url不包括server,protocol,port。headers里面所有的参数都是小写字母的，不管客户端实际传的是大写的还是小写的。因为headers里面可能有重复的参数，它们的值可能被覆盖也可能用逗号链接在一起。所以rawHeaders也是需要的。</li></ul><ul><li>2,3: 当接收一个Post/Put请求的时候，request的body也是很有用的。request对象传递的是一个数据流。这个数据流可以被监听或者pipe给其他的流。我们可以通过监听’data’和’end’事件来获取这个数据流。在’data’的监听事件中，每一个chunk都是一个Buffer,可以用一个array把所有的数据都存起来，然后在’end’的事件中把它们拼接起来。</li><li>4: request对象是一个ReadableStream,同时它也是一个EventEmitter.所以如果一个错误发生了，可以用’error’事件来监听。<strong>如果你不监听这个事件的话，这个错误就回被抛出，这会导致node程序的崩溃。</strong> 即使只是在error事件中打log,也需要监听它。当然最好是在error的时候，给http返回error错误信息。</li><li>5: 设置response的headers</li><li>6: 因为response是一个WritableStream, 用正常的写流的方式就可以。注意，要在写response的body之前设置返回的status和headers,因为在http的response过程中，headers也是在body之前的</li><li>7: 与request一样，需要处理error事件</li></ul><p>另外，这个文章还介绍了用pipe的方式来做最简单的直接响应服务的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  request.on(<span class="string">'error'</span>, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">    response.statusCode = <span class="number">400</span>;</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;);</span><br><span class="line">  response.on(<span class="string">'error'</span>, (err) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (request.method === <span class="string">'GET'</span> &amp;&amp; request.url === <span class="string">'/echo'</span>) &#123;</span><br><span class="line">    request.pipe(response);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    response.statusCode = <span class="number">404</span>;</span><br><span class="line">    response.end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><p>如果请求的method是’GET’并且url是’/echo’，那么就直接把接收到的数据传给客户端(request.pipe(response))。因为request是ReadableStream，而response 是WritableStream。他们都是数据流。可以直接用pipe。</p><p>二 ： body-parser模块</p><p><a href="https://www.npmjs.com/package/body-parser" target="_blank" rel="noopener">body parser</a>这个npm模块，常用在node的mvc框架中，作为一个中间件用来解析网络请求的body。当然它也提供了四种方式的解析。</p><ul><li>JSON body parser</li><li>Raw body parser </li><li>Text body Parser </li><li>URL-encoded form body parser. </li></ul><p>因为我们使用了json的方式来做body的解析，bodyParser.json();。当request请求的content-type是application/json, 那么这个中间件就会去做解析，把data里面的数据解析到body中。这个时候，request请求的data已经不是数据流的形式。所以导致在POST/PUT的时候pipe不成功。因为data已经被解析了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;问题： express，使用了中间件body-parser；在接收POST/PUT这类请求的时候，请求中有data数据，使用node的http模块，pipe不成功。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一： 首先要先了解node中http的处
      
    
    </summary>
    
    
      <category term="Node" scheme="http://lucyhao.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>canvas“美图”照片</title>
    <link href="http://lucyhao.com/2017/08/12/canvas%E2%80%9C%E7%BE%8E%E5%9B%BE%E2%80%9D%E7%85%A7%E7%89%87/"/>
    <id>http://lucyhao.com/2017/08/12/canvas“美图”照片/</id>
    <published>2017-08-12T05:00:45.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近遇到需要对图片进行处理的情况，搜索到了这篇文章<a href="https://www.html5rocks.com/en/tutorials/canvas/imagefilters/" target="_blank" rel="noopener">Image filters with canvas</a>，实质就是利用canvas对图片的像素进行处理。</p></blockquote><h3 id="Step1-get-pixels-获取图片的像素"><a href="#Step1-get-pixels-获取图片的像素" class="headerlink" title="Step1: get pixels 获取图片的像素"></a>Step1: get pixels 获取图片的像素</h3><p>在canvas中，可以用getImageData来获取画布上的像素数据，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imageData = ctx.getImageData(left, top, width, height);<span class="string">`</span></span><br></pre></td></tr></table></figure><p>得到的是一个imageData对象，包含三个内容</p><ul><li><p>imageData.width [只读]</p></li><li><p>imageData.height [只读]</p></li><li><p>imageData.data [只读] 首先这是一个一维数组，其次它是Uint8ClampedArray类型的一维数组。 这种类型的数组，就是把rgba这四个通道的数值(0-255)依次排开保存在这个一维的数组中，按照图片从上到下，从左到右的顺序。</p></li></ul><p>比如data 的值是[59,61,60,255,65,65,62,255…..] data[0],59就表示的是这个图像左上角第一个像素的r值(红色通道的值) ; data[1],61表示左上角第一个像素的g值(绿色通道的值); data[2],60表示 左上角第一个像素的b值(蓝色通道的值)；data[3],255表示左上角第一个像素的a值(透明度的值)。</p><h3 id="Step3-draw-pixels-把像素画成图片"><a href="#Step3-draw-pixels-把像素画成图片" class="headerlink" title="Step3: draw pixels 把像素画成图片"></a>Step3: draw pixels 把像素画成图片</h3><p>得到像素的rgba数组之后，对它们进行相应的处理，然后再使用putImageData把像素“绘制”到画布上，就可以看到处理之后的图片了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.putImageData(imagedata, dx, dy);</span><br></pre></td></tr></table></figure><p>imagedata同上面的imagedata对象；dx 在目标画布上距离左上角的水平位移；dy在目标画布上距离左上角的垂直位移。</p><p>有了getImageData和putImageData这两个API，已经解决了“输入”与“输出”的问题。剩下的就是中间的处理过程了。</p><h3 id="Step2-how-to-handle-pixels-处理像素"><a href="#Step2-how-to-handle-pixels-处理像素" class="headerlink" title="Step2: how to handle pixels 处理像素"></a>Step2: how to handle pixels 处理像素</h3><p>最关键的就是中间的处理过程啦。</p><p>(1)灰度图片(把一个彩色的图片变成灰色的)，公式如下，这是所谓的心理学公式，来源于人眼对红/蓝不敏感。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.2126</span>*r + <span class="number">0.7152</span>*g + <span class="number">0.0722</span>*b;</span><br></pre></td></tr></table></figure><p>把imageData中所有的rgb值都设置为这个值，显示出来的图片“看起来”就是灰色的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">imagedata</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = imagedata.data;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;d.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> r = d[i];</span><br><span class="line">    <span class="keyword">var</span> g = d[i+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> b = d[i+<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> v = <span class="number">0.2126</span>*r + <span class="number">0.7152</span>*g + <span class="number">0.0722</span>*b;</span><br><span class="line">    d[i] = d[i+<span class="number">1</span>] = d[i+<span class="number">2</span>] = v</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> imagedata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)图片变亮变暗, 把rgb的颜色值加大，图片就变亮；颜色值减小，图片就变暗。255,255,255白色；0,0,0黑色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">imagedata, adjustment</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = imagedata.data;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;d.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    d[i] += adjustment;</span><br><span class="line">    d[i+<span class="number">1</span>] += adjustment;</span><br><span class="line">    d[i+<span class="number">2</span>] += adjustment;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> imagedata;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>(3)卷积convolution,一个看到名字就觉得很难的东西。同时它又是一个对图像处理很有用的东西。可以用它来做“模糊”、“锐化”、“边缘检测”等工作。它的概念就是源像素周围的像素进行加权相加，然后作为目标元素。</p><p>比如我们要“锐化”一个图像，那么就用</p><p> [  0, -1,  0,   </p><p>   -1,  5, -1,    </p><p>​    0, -1,  0 ]</p><p>这个变化矩阵去加权像素。</p><p>如下图所示：</p><image width="600" src="http://blog-1255342807.cossgp.myqcloud.com/pixels.jpeg"></image><p>目标像素的r = 1 <em> 0 + 10 </em> -1 + 1<em> 0 + 5 </em> -1 + 2 <em> 5 + 20 </em> -1 + 10 <em> 0 + 1 </em> -1 + 2 * 0 = -26  最终r就是0（小于0的会用0代替，大于255的会用255代替), 同理依次计算g ,b 就能得到目标像素的r, g ,b 。</p><p>注意，因为imageData是按照rgba的顺序依次存的，变化矩阵也是用一维数组存的，所以在计算的时候，要注意正确的取值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convolution</span>(<span class="params">imageData, matrix</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取变化矩阵的合</span></span><br><span class="line">  <span class="keyword">var</span> divisor = matrix.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a + b;&#125;) || <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> oldpx = imageData.data;</span><br><span class="line">  <span class="keyword">var</span> w = imageData.width;</span><br><span class="line">  <span class="keyword">var</span> h = imageData.height</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果直接在imageData上修改的话，会导致后面的数据计算的时候拿到的不是原始的数据。所以需要创建一个新的 imageData数据</span></span><br><span class="line">  <span class="keyword">var</span> ctx = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line">  <span class="keyword">var</span> newdata = ctx.createImageData(w,h);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> newpx = newdata.data</span><br><span class="line">  <span class="keyword">var</span> len = newpx.length;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">4</span> === <span class="number">0</span>) &#123; <span class="comment">//alpha 通道的数据不变</span></span><br><span class="line">      newpx[i] = oldpx[i];</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> these = [</span><br><span class="line">      oldpx[i - w * <span class="number">4</span> - <span class="number">4</span>] || oldpx[i], <span class="comment">//没有的元素用本身去填</span></span><br><span class="line">      oldpx[i - w * <span class="number">4</span>]     || oldpx[i],</span><br><span class="line">      oldpx[i - w * <span class="number">4</span> + <span class="number">4</span>] || oldpx[i],</span><br><span class="line">      oldpx[i - <span class="number">4</span>]         || oldpx[i],</span><br><span class="line">      oldpx[i],</span><br><span class="line">      oldpx[i + <span class="number">4</span>]         || oldpx[i],</span><br><span class="line">      oldpx[i + w * <span class="number">4</span> - <span class="number">4</span>] || oldpx[i],</span><br><span class="line">      oldpx[i + w * <span class="number">4</span>]     || oldpx[i],</span><br><span class="line">      oldpx[i + w * <span class="number">4</span> + <span class="number">4</span>] || oldpx[i]</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">      res += these[j] * m[j];</span><br><span class="line">    &#125;<span class="comment">//求和</span></span><br><span class="line">    res /= divisor;</span><br><span class="line"></span><br><span class="line">    newpx[i] = res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newdata;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>卷积的变化矩阵有很多，运用不同的矩阵可以得到很多“美图”的效果。查了一下，有很多常见的算法，并且对于卷积计算的优化工作也是图像处理研究领域中的一个小课题。这也是一个可以深入研究的分支～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近遇到需要对图片进行处理的情况，搜索到了这篇文章&lt;a href=&quot;https://www.html5rocks.com/en/tutorials/canvas/imagefilters/&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
    
      <category term="canvas" scheme="http://lucyhao.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>React docs  V15.6.1 快速上手纪要</title>
    <link href="http://lucyhao.com/2017/07/12/React%20docs%20%20V15.6.1%20%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E7%BA%AA%E8%A6%81/"/>
    <id>http://lucyhao.com/2017/07/12/React docs  V15.6.1 快速上手纪要/</id>
    <published>2017-07-12T12:50:08.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>React docs  V15.6.1 快速上手纪要</p><p>准备把docs看一遍，先把快速上手quick start看了遍，记录下一些docs里面的注意事项</p><ol><li>实际应用中，React 的app只调用ReactDOM.render()一次</li><li>component总是以大写字母开头的</li><li>component只能返回一个单根元素</li><li>所有的React component都要像pure functions一样不改变props的值</li><li>只能在constructor里面来赋值this.state</li><li><p>state的更新可能是异步的，所以修改state的时候应该像下面这样</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 错误的更新方式</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  counter : <span class="keyword">this</span>.state.counter + <span class="keyword">this</span>.props.increment</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 正确的更新方式</span></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  counter : prevState.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li><li><p>React 有可能会合并多个setState() 到一个来提升性能</p></li><li><p>在React中，不能使用return false来阻止默认的行为。你必须调用preventDefault()来实现。比如</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ActionLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The link was clicked."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  &lt;a href=<span class="string">"#"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class="line">       Click me</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定事件，在React中需要用bind来绑定this, 方法有几种</p><p>（1）在constructor里面绑定this</p><p>（2）使用property initializer syntax 属性初始化语法(ps:不知道这个翻译对不对)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这种语法确保了'this'是绑定在handleClick</span></span><br><span class="line">  <span class="comment">// 警告：这只是一个 ‘实验’ 的语法</span></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is:'</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">      Click me</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>（3）使用箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is:'</span>,<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 这种语法确保了‘this’ 绑定在handleClick</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    &lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.handleClick(e)&#125;&gt;</span><br><span class="line">      Click me</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>用(3)这种语法的问题是，每一次创建loggingButton的时候都会创建一个不同的callback, 一般情况下是没问题的。但是如果callback作为props传给后面的components，那么就会导致后面的components 重新render, 这会导致性能问题。所以还是建议在constructor里面的bind</p></li><li><p>Keys帮助React标示哪些元素被改变了，增加了或者移动了。在数组里面，应该给出keys来给元素一个稳定的标示</p></li><li>一个好记忆的规则就是，在map()里面的元素需要keys</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React docs  V15.6.1 快速上手纪要&lt;/p&gt;
&lt;p&gt;准备把docs看一遍，先把快速上手quick start看了遍，记录下一些docs里面的注意事项&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实际应用中，React 的app只调用ReactDOM.render()一次&lt;/l
      
    
    </summary>
    
    
      <category term="React" scheme="http://lucyhao.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Rollup是什么</title>
    <link href="http://lucyhao.com/2017/04/22/Rollup%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://lucyhao.com/2017/04/22/Rollup是什么/</id>
    <published>2017-04-22T03:14:04.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>把<a href="https://rollupjs.org/" target="_blank" rel="noopener">Rollup</a>的官方文档看完，我的第一反应是？what? So? 这到底有什么用？这些事情Webpack不都已经做了吗？(webpack2 增加了tree shaking，tree shaking概念其实是Rollup提出的，所以其实Rollup出来的时候，可能写与webpack的区别还能多写好几百字)</p><p>Rollup是什么？它也是模块打包工具，类似于webpack。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install --global rollup   #全局安装</span><br><span class="line"><span class="meta">$</span> npm install --save-dev rollup  #or `npm i -D rollup` 项目级别安装</span><br></pre></td></tr></table></figure><p>—save-dev说明它与webpack一样只在项目开发，构建阶段使用。不是线上跑的项目所必需的。</p><h4 id="配置-rollup-config-js"><a href="#配置-rollup-config-js" class="headerlink" title="配置 rollup.config.js"></a>配置 rollup.config.js</h4><p>与webpack一样，rollup可以有配置文件，也没有不用配置文件，直接使用命令行CLI还执行也是可以的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rollup main.js --format cjs</span><br></pre></td></tr></table></figure><p>—format 表示我们需要把main.js按照什么标准来执行，这里—format cjs表示用CommonJS. 因为这个命令没有指定目标文件。所以会在控制台直接把main.js打包成CommonJS的标准打印出来。</p><p>回到配置文件上，rollup的配置文件如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  entry : <span class="string">'src/main.js'</span>,</span><br><span class="line">  format : <span class="string">'cjs'</span>,</span><br><span class="line">  dest : <span class="string">'bundle.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rollup -c   # rollup --config  打包的文件会输出到bundle.js</span><br><span class="line"><span class="meta">$</span> rollup -c -o bundle-2.js   #可以替换config中的输出文件配置，表示输出到bundle-2.js中</span><br></pre></td></tr></table></figure><p><em>因为是rollup运行config.js文件，所以我们可以使用export default这种表示方法，而不需要引入类似Babel这样的东西。所以你可以在配置文件使用你的Node运行支持的es2015的特性</em></p><p>可以配置不同的rollup的配置文件，比如开发环境的，生产环境的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rollup --config rollup.config.dev.js</span><br><span class="line"><span class="meta">$</span> rollup --config rollup.config.prod.js</span><br></pre></td></tr></table></figure><h4 id="配置package-json"><a href="#配置package-json" class="headerlink" title="配置package.json"></a>配置package.json</h4><p>与webpack一样，可以通过在package.json中配置scripts脚本最后通过npm来执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"rollup -c"</span>,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"rollup -c -w"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置插件plugins"><a href="#配置插件plugins" class="headerlink" title="配置插件plugins"></a>配置插件plugins</h4><p>官方文档中介绍了几个插件rollup-plugin-json, rollup-plugin-node-resolve，rollup-plugin-babel。主要说下rollup-plugin-node-resolve。这个插件让rollup认识外部的modules。也就是说，如果不加这个插件，在js文件中如果引用node_modules中的插件， rollup是不认识的。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install --save the-answer # or `npm i -S the-answer`</span><br></pre></td></tr></table></figure><p>安装了 the-answer组件，然后在js文件中引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> answer <span class="keyword">from</span> <span class="string">'the-answer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'the answer is '</span> + answer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm run build</span><br></pre></td></tr></table></figure><p>rollup会给出一个warning.</p><blockquote><p>‘the-answer’ is imported by src/main.js, but could not be resolved - treating</p></blockquote><p>如果要认识这些外部的组件，就需要引入plugin组件。在配置rollup.config.js中增加这样的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  entry : <span class="string">'src/main.js'</span>,</span><br><span class="line">  format : <span class="string">'cjs'</span>,</span><br><span class="line">  plugins : [ resolve() ],</span><br><span class="line">  dest : <span class="string">'bundle.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样，运行npm run build 就不会有报错啦～</p><h4 id="一个完整的rollup打包的例子"><a href="#一个完整的rollup打包的例子" class="headerlink" title="一个完整的rollup打包的例子"></a>一个完整的rollup打包的例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rollup-demo</span><br><span class="line">&gt; src</span><br><span class="line">  foo.js</span><br><span class="line">        main.js</span><br><span class="line">      bundle.js</span><br><span class="line">      rollup.config.js</span><br></pre></td></tr></table></figure><p>上面没有带package.json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/foo.js</span></span><br><span class="line"><span class="comment">// This function isn't used anywhere</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This function gets included</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cube</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;cube&#125; <span class="keyword">from</span> <span class="string">'./foo.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cube(<span class="number">5</span>)); <span class="comment">// 125</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  entry: <span class="string">'src/main.js'</span>,</span><br><span class="line">  format: <span class="string">'cjs'</span>,</span><br><span class="line">  dest: <span class="string">'bundle.js'</span> <span class="comment">// equivalent to --output</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行rollup -c 打包出来以后，bundle.js。可以看到bundle.js中对于import没有引用的代码是没有打包进去的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// This function isn't used anywhere</span></span><br><span class="line"><span class="comment">// This function gets included</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cube</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(cube(<span class="number">5</span>)); <span class="comment">// 125</span></span><br></pre></td></tr></table></figure><hr><p>到这里是不是都觉得rollup除了打包出来的代码简单，可以理解以外，好像没有什么东西了，连node_modules中的组件都还要引入一个插件才能理解。所以看官方文档不如看这篇文章<a href="https://medium.com/@Rich_Harris/tree-shaking-versus-dead-code-elimination-d3765df85c80" target="_blank" rel="noopener">Tree-shaking versus dead code elimination</a>，这篇文章中不仅解释了tree shaking ,还对rollup进行了很多解释。其中我觉得最有意义的就是：</p><ul><li>Rollup不完美，最好的结果也许是这样的步骤，例如 Rollup -&gt; UglifyJS / 带Uglify插件的Webpack 2  （这也是我为什么觉得如果说webpack做了1，2，3个事情的话，Rollup就做了事情1）</li><li>Rollup的目标是生产最有效（看起来就像人写的一样）的bundle,  Tree shaking 只是其中的一部分，Rollup还做了很多事（准确的说，是没有做）——没在函数中加入modules，没有把module的加载器引入到bundle的最顶部，尽量保持原代码。因为这些，所以如果是写库，用Rollup是一个很好的选择（当然Rollup也可以为apps使用，虽然Webpack比Rollupd多了很多特性，但是YMMV——选择一种新的方法也许会有意外收获哦，特别是对那些基本没有非ES6依赖的app）</li></ul><p>所以你会考虑用Rollup吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;把&lt;a href=&quot;https://rollupjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rollup&lt;/a&gt;的官方文档看完，我的第一反应是？what? So? 这到底有什么用？这些事情Webpack不都已经做了吗？(webpack2 
      
    
    </summary>
    
    
      <category term="Rollup" scheme="http://lucyhao.com/tags/Rollup/"/>
    
      <category term="javascript" scheme="http://lucyhao.com/tags/javascript/"/>
    
      <category term="打包工具" scheme="http://lucyhao.com/tags/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
      <category term="node" scheme="http://lucyhao.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>webpack2 vs webpack1</title>
    <link href="http://lucyhao.com/2017/04/19/webpack2%20vs%20webpack1/"/>
    <id>http://lucyhao.com/2017/04/19/webpack2 vs webpack1/</id>
    <published>2017-04-19T13:26:49.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>webpack2比1的优势，我觉得在于支持es2015和实现了tree shaking. 那我们就用两个简单的例子还比较一下webpack1和webpack2</p></blockquote><h4 id="工程一：webpack-demo"><a href="#工程一：webpack-demo" class="headerlink" title="工程一：webpack-demo"></a>工程一：webpack-demo</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp; mkdir webpack-demo &amp; cd webpack-demo</span><br><span class="line">&amp; npm init -y</span><br><span class="line">&amp; npm install --save-dev webpack@1.13.0</span><br></pre></td></tr></table></figure><p>说明，安装1版本的webpack</p><p>创建app文件夹，包括两个文件index.js和maths.js</p><p>app/maths.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This function isn't used anywhere</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function gets included</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cube</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;cube&#125; <span class="keyword">from</span> <span class="string">'./maths.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cube(<span class="number">5</span>)); <span class="comment">// 125</span></span><br></pre></td></tr></table></figure><p>创建一个index.html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 1 demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以在package.json文件中配置script脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "webpack",</span><br><span class="line">    "build": "webpack -p"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>package.json的配置情况</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpack-demo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack -p"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^6.4.1"</span>,</span><br><span class="line">    <span class="attr">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.23.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-es2015-webpack"</span>: <span class="string">"^6.4.3"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"1.13.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-runtime"</span>: <span class="string">"^6.23.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个web pack.config.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./app/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">      loaders: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">            query: &#123;</span><br><span class="line">                plugins: [<span class="string">'transform-runtime'</span>],</span><br><span class="line">                presets: [<span class="string">'es2015'</span>],</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install</span><br><span class="line"><span class="meta">$</span> npm run dev</span><br></pre></td></tr></table></figure><p>可以查看dist里面的bundle.js文件，可以看到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">exports.square = square;</span><br><span class="line">exports.cube = cube;</span><br><span class="line"><span class="comment">// This function isn't used anywhere</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function gets included</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cube</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的信息，square这个函数虽然没有被引用，最后打包的时候，还是会打包进bundle.js中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm run build</span><br></pre></td></tr></table></figure><p>dist里面的bundle.js文件中可见：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e*e&#125;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e*e*e&#125;</span><br></pre></td></tr></table></figure><h4 id="工程二-webpack2-demo"><a href="#工程二-webpack2-demo" class="headerlink" title="工程二:  webpack2-demo"></a>工程二:  webpack2-demo</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp; mkdir webpack2-demo &amp; cd webpack2-demo</span><br><span class="line">&amp; npm init -y</span><br><span class="line">&amp; npm install --save-dev webpack</span><br></pre></td></tr></table></figure><p>与工程一一样创建app/index.js , app/maths.js, index.html, 不同的是package.json与webpack.config.js</p><p>package.json如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"webpack2-demo"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack -p"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^2.4.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web pack.config.js的配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./app/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如上所示，package中少了很多babel包，webpack的config配置中也没有了关于解析es2015的配置。因为webpack2支持es2015的import/export , 所以减少了很多这样的配置。<a href="https://webpack.js.org/guides/get-started/#using-es2015-modules-with-webpack" target="_blank" rel="noopener">官方文档</a>里面明确说明了除了import/export, webpack不会修改任何其他使用了 <a href="http://es6-features.org/#Constants" target="_blank" rel="noopener">ES2015 特性</a>的代码，如果有使用<a href="http://es6-features.org/#Constants" target="_blank" rel="noopener">ES2015特性</a>的代码，请还是要引用babel.</p><p>ok, 我们现在来看下webpack2 的另外一个特性tree tracking.</p><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install</span><br><span class="line"><span class="meta">$</span> npm run dev</span><br></pre></td></tr></table></figure><p>查看dist/bundle.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="comment">/* unused harmony export square */</span></span><br><span class="line"><span class="comment">/* harmony export (immutable) */</span> __webpack_exports__[<span class="string">"a"</span>] = cube;</span><br><span class="line"><span class="comment">// This function isn't used anywhere</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function gets included</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cube</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面关于的square的函数有一个说明，它在任何地方都没有使用，当打包环境是process.env.NODE_ENV = “production”的时候，我们看下bundle.js还会打包进这个square函数吗？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; npm run build</span><br></pre></td></tr></table></figure><p>查看dist/bundle.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e*e*e&#125;</span><br></pre></td></tr></table></figure><p>只有cube函数打包进去了。square没有打包进去，tree shaking!!  题外话：关于这个tree shaking名字，据说是因为我们可以把application看成是一颗tree，application中的export看成是the branches of the tree，当你摇这颗树的时候，那些死的树枝就会掉落。所以当我们打包这个application的时候，那些没有用的export都不应该打包进去。</p><hr><p>当然，webpack2在配置上还有很多写法也改了。没有module.loaders, 变成module.rules等。 所以？你现在会把webpack1升级到2吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;webpack2比1的优势，我觉得在于支持es2015和实现了tree shaking. 那我们就用两个简单的例子还比较一下webpack1和webpack2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;工程一：webpack-demo&quot;&gt;
      
    
    </summary>
    
      <category term="前端开发" scheme="http://lucyhao.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="http://lucyhao.com/tags/javascript/"/>
    
      <category term="webpack" scheme="http://lucyhao.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>利用d3画地图</title>
    <link href="http://lucyhao.com/2017/03/10/%E5%88%A9%E7%94%A8d3%E7%94%BB%E5%9C%B0%E5%9B%BE/"/>
    <id>http://lucyhao.com/2017/03/10/利用d3画地图/</id>
    <published>2017-03-10T14:11:48.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>其实这篇文章主要借鉴了文章<a href="https://bost.ocks.org/mike/map/" target="_blank" rel="noopener">Let’s make a map</a>来画地图，就当是看一个翻译文章吧，不过我感觉会比原文简单很多！</p></blockquote><p>首先明确几个问题：</p><ul><li>这里画的是新加坡的地图以及新加坡所有的公交站点，原因是新加坡的数据在网上是公开的，易获取。后面会附上所有数据来源。</li><li>国内的Echarts其实在地图方面已经做的很领先了，提供了很多酷炫组件。但是如上一条，除了Echarts本身提供了地图数据，要再在地图的基础上做一些其他的展示就比较困难，因为真实数据很难获取到。很多时候个人想拿数据做点研究工作，或者练手工作都苦于没有数据</li></ul><p>OK，这就开始画吧！</p><h2 id="Step1-创建一个html文件"><a href="#Step1-创建一个html文件" class="headerlink" title="Step1: 创建一个html文件"></a>Step1: 创建一个html文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>your title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//d3js.org/d3.v4.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//d3js.org/topojson.v2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//...</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入了两个文件，一个是d3，一个是topojson。其中<a href="https://github.com/topojson/topojson" target="_blank" rel="noopener">topojson</a>是对GeoJson的一种扩展。而<a href="http://geojson.org/" target="_blank" rel="noopener">eoJson</a>是一种对地理数据的编码格式。</p><h2 id="Step2-画地图"><a href="#Step2-画地图" class="headerlink" title="Step2: 画地图"></a>Step2: 画地图</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> width = <span class="number">960</span>;</span><br><span class="line"><span class="keyword">var</span> height = <span class="number">600</span>;</span><br><span class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"svg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1: make sg in the center (103.8°E 1.3°N)</span></span><br><span class="line"><span class="keyword">var</span> projection = d3.geoMercator()</span><br><span class="line">    .center([<span class="number">103.85</span>, <span class="number">1.3</span>])</span><br><span class="line">    .scale(<span class="number">100000</span>)</span><br><span class="line">    .translate([width / <span class="number">2</span>, height / <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = d3.geoPath()</span><br><span class="line">    .projection(projection);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2: draw</span></span><br><span class="line">d3.json(<span class="string">"sg.json"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, sg</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    svg.append(<span class="string">"g"</span>)</span><br><span class="line">        .selectAll(<span class="string">"path"</span>)</span><br><span class="line">        .data(topojson.feature(sg, sg.objects.sg).features)</span><br><span class="line">        .enter().append(<span class="string">"path"</span>)</span><br><span class="line">        .attr(<span class="string">"class"</span>,<span class="string">"map"</span>)</span><br><span class="line">        .attr(<span class="string">"d"</span>, path);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码有两处需要解释的。<br>第一处：首先地球是球体，是立体的，当我们要在二维平面上描述地图的时候，就需要做一个投影把立体的地图投影到二维平面上。投影很多种方法，得到的地图看到会不太一样。互联网上常见的地图都是做的墨卡托投影(mercator projection)。如上面代码所示，第一处代码的作用就是把新加坡放到中心，首先是做一个投影d3.geoMercator()(注意此函数是d3 v4版本的，v3版本的是d3.geo.mercator());因为新加坡的经纬度大概是是东经103.8度，北纬1.3度，所以设置中心点center();然后放大，是的，因为新加坡太小啦，不放大的话，根本看不到它的样子，scale()；最后移动到页面上svg的中心translate();</p><p>第二处：画地图，其中sg.json是经过处理的新加坡地图数据(处理成topoJson格式)。原始数据是的GeoJson格式的，后面会附上所有数据来源。要处理GeoJson数据也是简单npm安装topoJson包,然后调用命令<a href="https://github.com/topojson/topojson-server/blob/master/README.md#geo2topo" target="_blank" rel="noopener">geo2topo</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install topoJson</span><br><span class="line">geo2topo old.json &gt; new.json</span><br></pre></td></tr></table></figure><p>如果调用命令的时候，显示没有geo2topo命令，那npm的时候全局安装就好了。<br>如下图，我们的到了想要的地图。</p><image width="600" alt="新加坡地图，不包含水域部分" src="http://blog-1255342807.cossgp.myqcloud.com/sg.png"></image><h2 id="Step3-增加区域之间的边界"><a href="#Step3-增加区域之间的边界" class="headerlink" title="Step3: 增加区域之间的边界"></a>Step3: 增加区域之间的边界</h2><p>我们的数据中不是只有整个地图的边界数据，我们拿到的其实包括了新加坡每个区域的数据。就类似中国有好多个省组成，每个省之间有边界，我们也可以画出新加坡每个区域之间的边界。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.area-borders&#123;</span><br><span class="line">    fill: none;</span><br><span class="line">    stroke: #999;</span><br><span class="line">    stroke-dasharray: 2,2;</span><br><span class="line">    stroke-linejoin: round;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">svg.append(&quot;path&quot;)</span><br><span class="line">        .attr(&quot;class&quot;, &quot;area-borders&quot;)</span><br><span class="line">        .attr(&quot;d&quot;, path(topojson.mesh(sg, sg.objects.sg, function(a, b) &#123; return a !== b; &#125;)));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如下图，得到带边界的地图</p><image width="600" alt="带区域边界" src="http://blog-1255342807.cossgp.myqcloud.com/sg-area.png"></image><h2 id="Step4-增加bus-stop的打点"><a href="#Step4-增加bus-stop的打点" class="headerlink" title="Step4: 增加bus stop的打点"></a>Step4: 增加bus stop的打点</h2><p>画出地图以后，总想在上面做点什么。结果查到了新加坡的公交数据，所以准备在地图上显示新加坡所有的公交站点的情况。看一下分布情况。新加坡总共有4853个公交，数据来源见下面。通过api，然后简单处理，得到如下这样的json数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;<span class="attr">"value"</span>:[&#123;<span class="attr">"BusStopCode"</span>:<span class="string">"01012"</span>,<span class="attr">"RoadName"</span>:<span class="string">"Victoria St"</span>,<span class="attr">"Description"</span>:<span class="string">"Hotel Grand Pacific"</span>,<span class="attr">"Latitude"</span>:<span class="number">1.29684825487647</span>,<span class="attr">"Longitude"</span>:<span class="number">103.85253591654006</span>&#125;,...]&#125;</span><br></pre></td></tr></table></figure><p>然后我们就可以用经纬度在地图上打点了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d3.json(<span class="string">"bus-stop-grab.json"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,busstop</span>)</span>&#123;</span><br><span class="line">        svg.selectAll(<span class="string">"circle"</span>)</span><br><span class="line">            .data(busstop.value).enter().append(<span class="string">"circle"</span>)</span><br><span class="line">            .attr(<span class="string">"class"</span>,<span class="string">"pin"</span>)</span><br><span class="line">            .attr(<span class="string">"r"</span>, <span class="number">1</span>)</span><br><span class="line">            .attr(<span class="string">"transform"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"translate("</span> + projection([</span><br><span class="line">                    d.Longitude,</span><br><span class="line">                    d.Latitude</span><br><span class="line">                ]) + <span class="string">")"</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>得到如下的地图：</p><image width="600" alt="带公交站点的地图" src="http://blog-1255342807.cossgp.myqcloud.com/sg-bus-stops.png"></image><p>从新加坡的公交站点分布也能看出，在居民区密集分布，没有公交的地方恰好就是机场，蓄水区，军演区，化工区，附带一张新加坡重建局官网的2013城市规划建设图。</p><image width="600" alt="城市规划建设图" src="http://blog-1255342807.cossgp.myqcloud.com/sg-land-use-plan.jpg"></image><blockquote><p>结论：新加坡这个城市，各种数据公开，太适合拿来做一些研究了。</p></blockquote><h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><ul><li>新加坡地图数据：<a href="https://data.gov.sg/" target="_blank" rel="noopener">https://data.gov.sg/</a> 获取的是14年不带水域边界的数据(其实从这个网站也可以看出来，新加坡很多数据都是公开的，也有很多统计分析)</li><li>新加坡公交数据：<a href="https://www.mytransport.sg/content/mytransport/home/dataMall.html" target="_blank" rel="noopener">https://www.mytransport.sg/content/mytransport/home/dataMall.html</a> 这里有新加坡所有的交通数据，不止是公交的，所以可以自行发挥做各种测试</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;其实这篇文章主要借鉴了文章&lt;a href=&quot;https://bost.ocks.org/mike/map/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Let’s make a map&lt;/a&gt;来画地图，就当是看一个翻译文章吧，不
      
    
    </summary>
    
      <category term="前端开发" scheme="http://lucyhao.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="可视化" scheme="http://lucyhao.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="d3" scheme="http://lucyhao.com/tags/d3/"/>
    
      <category term="map" scheme="http://lucyhao.com/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>尝试写一下对象的序列化</title>
    <link href="http://lucyhao.com/2016/08/19/%E5%B0%9D%E8%AF%95%E5%86%99%E4%B8%80%E4%B8%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://lucyhao.com/2016/08/19/尝试写一下对象的序列化/</id>
    <published>2016-08-19T02:20:46.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>问题: 如何把一个object序列化的显示?这种需求其实还是很多的, 主要都是为了方便查看object.</p></blockquote><p>比如一个object , {“name”:”lucyhao”,”age”:”18”}, 显示成如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"lucyhao"</span>,</span><br><span class="line"><span class="string">"age"</span> : <span class="string">"18"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先说明一下JSON.stringify已经把序列化的工作做了,并且很全面,在实际的需求中,能够使用就不要自己写了.</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify</a></p><ul><li>解析object/array, 基本思路,<em>读取 object和key和value,  把key和value组合成一个字符串放到数组中,最后把数组连接起来,比如[‘“name”:”lucyhao”\n’,’”age”:”18”\n’].join(‘’). 如果在解析的过程中遇到object/array, 递归的解析</em></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> level = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> space = <span class="string">"    "</span>;<span class="comment">//解析出来每一行前面的格式</span></span><br><span class="line"><span class="keyword">var</span> beautify = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> _str = value;</span><br><span class="line">level++;</span><br><span class="line"><span class="keyword">var</span> _l = level;</span><br><span class="line"><span class="keyword">var</span> tab = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> endTab = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//每一层(因为会递归的计算)的起始字符与结束字符</span></span><br><span class="line"><span class="keyword">while</span>(_l &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(_l &gt; <span class="number">1</span>)&#123;</span><br><span class="line">endTab += space;</span><br><span class="line">&#125;</span><br><span class="line">tab += space;</span><br><span class="line">_l --;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间的解析部分(object/array的解析)</span></span><br><span class="line"><span class="keyword">var</span> jsonStr = [];</span><br><span class="line"></span><br><span class="line">level--;</span><br><span class="line"><span class="keyword">return</span> jsonStr.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间的解析部分, 就是对object/array的解析</p><p>(1)object的解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _beautifyJSON = <span class="function"><span class="keyword">function</span>(<span class="params">value,tab,endTab</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _str = value;</span><br><span class="line"><span class="keyword">var</span> jsonStr = [];</span><br><span class="line">jsonStr.push(<span class="string">"&#123;\n"</span>);<span class="comment">//开头的花括号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> _str)&#123;</span><br><span class="line"><span class="comment">//只解析可枚举的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(_str[key]) == <span class="string">"object"</span>)&#123;</span><br><span class="line"><span class="comment">//如果是对象,递归调用对象的解析</span></span><br><span class="line"><span class="keyword">var</span> object = beautify(_str[key]);</span><br><span class="line"><span class="keyword">if</span>(object === <span class="literal">false</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">jsonStr.push(tab+<span class="string">'"'</span>+key+<span class="string">'":'</span>+object+<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">//如果不是,加入到数组中</span></span><br><span class="line">  jsonStr.push(tab+<span class="string">'"'</span>+key+<span class="string">'":'</span>+beautifyType(_str[key])+<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">jsonStr.push(endTab+<span class="string">"&#125;"</span>);<span class="comment">//结尾的花括号</span></span><br><span class="line"><span class="keyword">return</span> jsonStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)array的解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _beautifyJSONArray = <span class="function"><span class="keyword">function</span>(<span class="params">value,tab,endTab</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> _str = value;</span><br><span class="line"><span class="keyword">var</span> jsonStr = [];</span><br><span class="line">jsonStr.push(<span class="string">"[\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ;i&lt;_str.length ;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(_str[i]) == <span class="string">"string"</span> || <span class="keyword">typeof</span>(_str[i]) == <span class="string">"number"</span>)&#123;</span><br><span class="line">            <span class="comment">//字符串或者数据,直接加入数组</span></span><br><span class="line"><span class="keyword">if</span>(i == _str.length <span class="number">-1</span>)&#123;</span><br><span class="line">jsonStr.push(tab+beautifyType(_str[i])+<span class="string">"\n"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">jsonStr.push(tab+beautifyType(_str[i])+<span class="string">",\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//对象,递归的调用对象的解析</span></span><br><span class="line"><span class="keyword">var</span> object = beautify(_str[i]);</span><br><span class="line"><span class="keyword">if</span>(object === <span class="literal">false</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i == _str.length <span class="number">-1</span>)&#123;</span><br><span class="line">jsonStr.push(tab+object+<span class="string">"\n"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">jsonStr.push(tab+object+<span class="string">",\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">jsonStr.push(endTab+<span class="string">"]"</span>);</span><br><span class="line"><span class="keyword">return</span> jsonStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实上面已经完成了核心的功能,  但是如何这是一道面试官出的题, 这个时候面试官就会说, 你再考虑下有没有什么情况没考虑到. 看下JSON.stringify规范<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-json.stringify" target="_blank" rel="noopener">http://www.ecma-international.org/ecma-262/6.0/#sec-json.stringify</a></p><p>就会发现, 除了算法, 里面还有NOTE1 - NOTE6</p><h6 id="NOTE1-要注意循环的情况-如果有循环-需要抛出错误"><a href="#NOTE1-要注意循环的情况-如果有循环-需要抛出错误" class="headerlink" title="NOTE1 : 要注意循环的情况. 如果有循环, 需要抛出错误."></a>NOTE1 : 要注意循环的情况. 如果有循环, 需要抛出错误.</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [];</span><br><span class="line">a[<span class="number">0</span>] = a;</span><br><span class="line">my_text = <span class="built_in">JSON</span>.stringify(a); <span class="comment">//This must throw a TypeError.</span></span><br></pre></td></tr></table></figure><p> 所以我们还需要考虑循环的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isCircle</span>(<span class="params">a,aStack</span>)</span>&#123;</span><br><span class="line">aStack = aStack || [];</span><br><span class="line"><span class="keyword">var</span> length = aStack.length;</span><br><span class="line"><span class="keyword">while</span>(length--)&#123;</span><br><span class="line"><span class="keyword">if</span>(aStack[length] === a)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">aStack.push(a);</span><br><span class="line"><span class="keyword">var</span> keys = getkeys(a);</span><br><span class="line">length = keys.length;</span><br><span class="line"><span class="keyword">while</span> (length--) &#123;</span><br><span class="line">        <span class="keyword">var</span> key = keys[length];</span><br><span class="line">        <span class="keyword">if</span> (isCircle(a[key],aStack))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">aStack.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="NOTE2-符号的显示"><a href="#NOTE2-符号的显示" class="headerlink" title="NOTE2: 符号的显示"></a>NOTE2: 符号的显示</h6><ul><li>null 会解析成字符串null显示</li><li>true/false 会解析成字符串true/false显示</li><li>undefined ,不会解析</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解析json的时候,对不同的类型进行不同的显示;大多数类型都转换成string进行显示</span></span><br><span class="line"><span class="comment">//Object.prototype.toString 可以判断是什么类型</span></span><br><span class="line"><span class="keyword">var</span> beautifyType = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> type = <span class="built_in">Object</span>.prototype.toString.call(value);</span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'[object String]'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'[object Boolean]'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'[object Null]'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'[object RegExp]'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'[object Date]'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">'"'</span>+value+<span class="string">'"'</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'[object Number]'</span>:</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isNaN</span>(value) || value === <span class="literal">Infinity</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> +value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'[object Array]'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'[object Object]'</span>:</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'[object Undefined]'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'[object Function]'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">//在外层判断是undefined,不进行解析;也可以在外层判断出undefined之后,就不进行类型转换显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="NOTE3-字符串包裹在””之间显示-双引号和右斜线前加-控制字符做转义显示-uHHHH-或者用短些形式，比如-b-f-n-r-t-此条中对于控制字符的，自己没有给出例子，所以实在不知如何写"><a href="#NOTE3-字符串包裹在””之间显示-双引号和右斜线前加-控制字符做转义显示-uHHHH-或者用短些形式，比如-b-f-n-r-t-此条中对于控制字符的，自己没有给出例子，所以实在不知如何写" class="headerlink" title="NOTE3 : 字符串包裹在””之间显示; 双引号和右斜线前加\;控制字符做转义显示\uHHHH,或者用短些形式，比如\b,\f,\n,\r,\t (此条中对于控制字符的，自己没有给出例子，所以实在不知如何写)"></a>NOTE3 : 字符串包裹在””之间显示; 双引号和右斜线前加\;控制字符做转义显示\uHHHH,或者用短些形式，比如\b,\f,\n,\r,\t (此条中对于控制字符的，自己没有给出例子，所以实在不知如何写)</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于字符串包裹在双引号之类的，见note2</span></span><br><span class="line"><span class="comment">//对于双引号加\的</span></span><br><span class="line">value.replace(<span class="regexp">/\"/g</span>,<span class="string">'\\\"'</span>);</span><br><span class="line"><span class="comment">//对于\ 变\\的,因为\本身是转义符，如果要有"\"符号本身，js 应该\\这样写，</span></span><br><span class="line"><span class="comment">//var a = "\sdfsfd";  其实 a = "sdfsfd" 如果要表达\字符的意思，应该是var a = "\\sdfsfd";</span></span><br><span class="line"><span class="comment">//所以看起来好像也不用做什么，因为我们是在用js来做这个算法</span></span><br></pre></td></tr></table></figure><h6 id="NOTE4-NaN-和Infinity会被解析成字符串null-（见note2）"><a href="#NOTE4-NaN-和Infinity会被解析成字符串null-（见note2）" class="headerlink" title="NOTE4: NaN 和Infinity会被解析成字符串null （见note2）"></a>NOTE4: NaN 和Infinity会被解析成字符串null （见note2）</h6><h6 id="NOTE5-undefined和function这类，不会解析-（见note2）"><a href="#NOTE5-undefined和function这类，不会解析-（见note2）" class="headerlink" title="NOTE5: undefined和function这类，不会解析 （见note2）"></a>NOTE5: undefined和function这类，不会解析 （见note2）</h6><h6 id="NOTE6-对于最后json解析出来呈现的样子，规定了左花括号开始，属性用逗号隔开，右花括号结束。属性后面带冒号，属性值。数组左方括号，值之间用逗号隔开，又方括号"><a href="#NOTE6-对于最后json解析出来呈现的样子，规定了左花括号开始，属性用逗号隔开，右花括号结束。属性后面带冒号，属性值。数组左方括号，值之间用逗号隔开，又方括号" class="headerlink" title="NOTE6: 对于最后json解析出来呈现的样子，规定了左花括号开始，属性用逗号隔开，右花括号结束。属性后面带冒号，属性值。数组左方括号，值之间用逗号隔开，又方括号"></a>NOTE6: 对于最后json解析出来呈现的样子，规定了左花括号开始，属性用逗号隔开，右花括号结束。属性后面带冒号，属性值。数组左方括号，值之间用逗号隔开，又方括号</h6><hr><p>最近被问好多比如如何判断类型这样的问题，突然有个需求把json字符串解析出来显示，就尝试自己写一下. PS : 还是JSON.stringify考虑的全，还可以往里面传function,指名解析哪些属性等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;问题: 如何把一个object序列化的显示?这种需求其实还是很多的, 主要都是为了方便查看object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如一个object , {“name”:”lucyhao”,”age”:”18”}, 显示成如下&lt;
      
    
    </summary>
    
      <category term="前端开发" scheme="http://lucyhao.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="http://lucyhao.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端流程化的一些方案</title>
    <link href="http://lucyhao.com/2016/04/27/%E5%89%8D%E7%AB%AF%E6%B5%81%E7%A8%8B%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%A1%88/"/>
    <id>http://lucyhao.com/2016/04/27/前端流程化的一些方案/</id>
    <published>2016-04-27T11:01:20.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于“团队”主要就是做一些内部项目，包括一些小demo和一些小系统，所以前端的人员情况不是特别乐观，一些同学没有服务器的权限，导致只能在自己的window机器上开发～</p><p>我仔细想了下，采用问题＋解决方案的方式来写这个文章也许更能表达清楚我的想法与做法.</p><blockquote><p>问题一：没有采用任务代码版本控制</p></blockquote><blockquote><p>问题二：因为在window上都是开发的静态页面，html+css+js，html 中引入的也是源码，导致浏览器有缓存问题。在js中ajax请求后端数据的时候，因为前后端是分离的，要不就是跨域访问，要不就是后端给的不是8080，8081这些浏览器端js能请求到的端口</p></blockquote><blockquote><p>问题三：如何部署？前端同学在window上开发完，因为问题二提到的跨域什么问题自己也搞不清楚原因，就把代码打包给后端，后端放到服务器上；把ip+port给产品就算完成任务～后续的维护及其麻烦，首先前端同学可能都没有在自己的window机器上确认过数据是否ＯＫ？其次修改bug,多人协作，后端对代码版本的维护等都是问题</p></blockquote><p>问题一解决方案：这个就不用多说了，没有版本控制就没有协作，就没有代码管理，直接上了git. </p><p>问题二解决方案：</p><p>其实对于团队来说，我们接手的主要是两类项目。一类就是小demo，大概一，两个静态页面的样子；一类就是后台系统。</p><h3 id="一：先说小demo的解决方案："><a href="#一：先说小demo的解决方案：" class="headerlink" title="一：先说小demo的解决方案："></a>一：先说小demo的解决方案：</h3><p>既然是小demo,那么我认为快速交付就是它的宗旨，所以采用静态页面的方式，html+css+js, </p><p>jquery+bootstrap不仅前端同学上手快也是他们效率最高的。代码组织结构如下：</p><p><img src="http://3gimg.qq.com/map_site_cms/dcfe/blog/simpleCode.png" alt="代码组织结构"></p><ul><li>.html各种html文件</li><li>css ,js, images都是顾名思义的目录</li><li>ackage.json基本信息和gulpfile.js中需要用到的包</li></ul><p>gulpfile.js当然也就是大家熟悉的对静态资源压缩，合并，增加md5 hash这类的功能，也是为了解决浏览器的缓存问题。在gulpfile.js中，还会对引用资源的路径做替换，比如开发的时候：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#html中对外部css的引用</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"css/page/city.css"</span>/&gt;</span><br><span class="line"></span><br><span class="line">#html中对外部js的引用</span><br><span class="line">&lt;script src=<span class="string">"js/page/city.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">#page.css的对image的引用</span><br><span class="line">div&#123;</span><br><span class="line"> 　　　background: url(../../images/same.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上线前会替换成绝对路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#替换以后</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"/dist/css/page/city-3d7d979f53.css"</span>&gt;</span><br><span class="line"></span><br><span class="line">#替换以后</span><br><span class="line">&lt;script src=<span class="string">"/dist/js/page/city-b513faff42.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">#替换以后</span><br><span class="line">div&#123;<span class="attr">background</span>:url(<span class="regexp">/dist/im</span>ages/same.png)&#125;</span><br></pre></td></tr></table></figure><p>规定了下各静态文件在引用资源时候的规范：</p><ul><li>css文件中引用image图片路径, 如: ../../images/**.png</li><li>js文件中引用image图片路径，如images/**.png</li><li>html文件中引用css或者js路径，如<link rel="stylesheet" stype="text/css" href="css/page/city.css"></li><li>jquery+bootstrap直接引用cdn的路径</li></ul><p>这是为了gulpfile.js的通用性（有点小私心，不用每个项目我都还要去再重写下gulpfile），方便部署（部署的问题后面聊）.</p><h3 id="二：接口部分的解决方案"><a href="#二：接口部分的解决方案" class="headerlink" title="二：接口部分的解决方案"></a>二：接口部分的解决方案</h3><p>再小的demo也需要去后端拉取数据，针对存在的问题。一开始采用的是ngnix转发的方式，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ^~ <span class="regexp">/test/</span> &#123;</span><br><span class="line">         proxy_pass http:<span class="comment">//10.*.*.*:30000/;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来发现要转发的接口越来越多；另外有些接口还可以再做一些逻辑处理，比如后端给的接口只支持单id查询，如果有一个转发层，还可以给js封装一个支持多id查询的前端接口；相对其他语言js是我最熟悉的语言，所以理所当然就选择了用node来做这个转发层。</p><p>考虑到只是简单的转发+一些小逻辑处理, 所以这个node转发层,也没有采用什么mvc框架. 总共引用的模块如下: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">var</span> urllib = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">"iconv-lite"</span>);</span><br></pre></td></tr></table></figure><p>所做的事情 简单到就是 转发+某些接口需要编码转换 </p><p>解决跨域+返回的数据格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'GET, POST, OPTIONS, PUT, PATCH, DELETE'</span>);</span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'X-Requested-With,content-type'</span>);</span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>);</span><br><span class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json;charset=UTF-8'</span>)</span><br></pre></td></tr></table></figure><p>虽然转发层这里太简单，但是我依然秉承着严谨的态度(^_^)，还加了测试代码(supertest+mocha)比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'supertest'</span>)(<span class="string">"http://localhost:3001"</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'get 热度数据'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">'returns json data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">        request</span><br><span class="line">            .get(<span class="string">'/getHeat'</span>)</span><br><span class="line">            .expect(<span class="string">'Content-Type'</span>, <span class="string">'application/json;charset=UTF-8'</span>, done)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>三：后台系统</p><p>其实这是问题二的第二类前端涉及到的部分，采用的是node+express+webpack的方式。</p><p>采用node是因为相对于php,python来说，我更熟悉js; 采用express是因为资料相对多一些，网络上也有一些解决方案(我也是第一次做node项目)；webpack就是打包工具（私心也是因为react现在比较火，在内部系统上可以尝试下，学习嘛）</p><p>前面也提到到团队人员配置的问题，所以最近也是用 express-generator的代码修改了下，把jade替换成swig模板，然后增加webpack的配置。做了一个myexpress-generator，放到了公司内部</p><p>当然还不完善，这样方便团队人员开发的时候，能够直接用~</p><p>项目目录如下：</p><p><img src="http://3gimg.qq.com/map_site_cms/dcfe/blog/projectCode.png" alt="项目目录"></p><ul><li>在开发的时候，运行wpDevServer.js，为了修改静态文件的时候，能够直接刷新页面看到结果，而不用再webpack打包一次</li><li>其他的其实就是express  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于“团队”主要就是做一些内部项目，包括一些小demo和一些小系统，所以前端的人员情况不是特别乐观，一些同学没有服务器的权限，导致只能在自己的window机器上开发～&lt;/p&gt;
&lt;p&gt;我仔细想了下，采用问题＋解决方案的方式来写这个文章也许更能表达清楚我的想法与做法.&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="node" scheme="http://lucyhao.com/tags/node/"/>
    
      <category term="前端流程化" scheme="http://lucyhao.com/tags/%E5%89%8D%E7%AB%AF%E6%B5%81%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【译】使用supertest来测试API</title>
    <link href="http://lucyhao.com/2016/04/19/%E3%80%90%E8%AF%91%E3%80%91%E4%BD%BF%E7%94%A8supertest%E6%9D%A5%E6%B5%8B%E8%AF%95API/"/>
    <id>http://lucyhao.com/2016/04/19/【译】使用supertest来测试API/</id>
    <published>2016-04-19T07:48:53.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>我最近发现supertest是一个测试API很棒的工具. 虽然对我来说它还很新,但是这个包其实好几年前就有了.</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以使用很多种方式配置supertest. 如果测试的一个外部连接, 可以像下面这样配置base url:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'supertest'</span>)(<span class="string">"http://example.com"</span>);</span><br></pre></td></tr></table></figure><p>如果要测试Express框架搭建的APP, 可以把APP的入口文件传给supertest,  让它关注APP的状态(启动/关闭)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myApp = <span class="built_in">require</span>(<span class="string">'../app.js'</span>);</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'supertest'</span>)(myApp);</span><br></pre></td></tr></table></figure><p>这样写的好处是, supertest会关注APP的启动和关闭. 你就可以转注在写测试代码, 而不用关系启动APP, 配置端口等.</p><h2 id="写测试"><a href="#写测试" class="headerlink" title="写测试"></a>写测试</h2><p>一旦引入了supertest, 使用起来就很简单了. 在下面的例子中, 使用Mocha这个测试框架.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'my api'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">'returns hello world'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">        request.</span><br><span class="line">            .get(<span class="string">'/'</span>)</span><br><span class="line">            .expect(<span class="string">'Hello, World!'</span>, done);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最简单的测试get接口的代码. 访问根目录”/“, 期望得到的返回是”Hello, World!”.</p><p>由于request是异步的, 把”done”作为参数(Mocha提供的). 在验证服务端的返回的时候调用它.</p><p>可以像下面这样测试一个JSON数据:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.</span><br><span class="line">    .get(<span class="string">'/'</span>)</span><br><span class="line">    .expect(&#123;<span class="attr">message</span>: <span class="string">"Hello, World!"</span>&#125;, done);</span><br></pre></td></tr></table></figure><p>测试header:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.</span><br><span class="line">    .get(<span class="string">'/foo'</span>)</span><br><span class="line">    .expect(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>, done);</span><br></pre></td></tr></table></figure><p>测试状态码: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request</span><br><span class="line">    .get(<span class="string">'/some-error-route'</span>)</span><br><span class="line">    .expect(<span class="number">500</span>, <span class="string">'Oops. Something went wrong'</span>, done);</span><br></pre></td></tr></table></figure><p>发送非-GET请求:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;<span class="attr">name</span>: <span class="string">'Bob'</span>&#125;;</span><br><span class="line">request</span><br><span class="line">    .post(<span class="string">'/create-user'</span>)</span><br><span class="line">    .send(user)</span><br><span class="line">    .expect(&#123;<span class="attr">success</span>:<span class="literal">true</span>&#125;, done);</span><br></pre></td></tr></table></figure><p>可以设置request的头信息: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request</span><br><span class="line">    .get(<span class="string">'/foo'</span>)</span><br><span class="line">    .set(<span class="string">'Accept'</span>, <span class="string">'text/plain'</span>)</span><br><span class="line">    .expect(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>, done);</span><br></pre></td></tr></table></figure><p>还可以使用正则表达式匹配header和body.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request</span><br><span class="line">    .get(<span class="string">'/redirect'</span>)</span><br><span class="line">    .expect(<span class="string">'Location'</span>: <span class="regexp">/\/destination/</span>)</span><br><span class="line">    .expect(<span class="number">301</span>, done);</span><br></pre></td></tr></table></figure><p>如果需要串行的多个requests, 可以利用”expect”的回调来实现,如下: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Kick things off</span></span><br><span class="line">purgeUsers();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">purgeUsers</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    request</span><br><span class="line">        .get(<span class="string">'/users/purge'</span>)</span><br><span class="line">        .expect(&#123;<span class="attr">success</span>:<span class="literal">true</span>&#125;, checkNoUsers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNoUsers</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) done(err);</span><br><span class="line">    request</span><br><span class="line">        .get(<span class="string">'/users'</span>)</span><br><span class="line">        .expect([], addUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) done(err);</span><br><span class="line">    request</span><br><span class="line">        .post(<span class="string">'/users'</span>)</span><br><span class="line">        .send(&#123;<span class="attr">name</span>: <span class="string">'Bob'</span>&#125;)</span><br><span class="line">        .expect(&#123;<span class="attr">success</span>:<span class="literal">true</span>&#125;, checkUsers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUsers</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) done(err);</span><br><span class="line">    request</span><br><span class="line">        .get(<span class="string">'/users'</span>)</span><br><span class="line">        .expect([&#123;<span class="attr">name</span>: <span class="string">'Bob'</span>&#125;], done);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 最后,如果要对结果做一些特殊的处理, 可以在.end()这个函数中处理:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line">request</span><br><span class="line">    .get(<span class="string">'/foo'</span>)</span><br><span class="line">    .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        assert.equal(result.body.foo, <span class="string">'Bar'</span>);</span><br><span class="line">        done();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>可能还有很多我没有注意到的特性, 不过上面的这些都是我常用到的~</p><p>译: <a href="http://willi.am/blog/2014/07/28/test-your-api-with-supertest/" target="_blank" rel="noopener">http://willi.am/blog/2014/07/28/test-your-api-with-supertest/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我最近发现supertest是一个测试API很棒的工具. 虽然对我来说它还很新,但是这个包其实好几年前就有了.&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;可以使用很多种
      
    
    </summary>
    
    
      <category term="node" scheme="http://lucyhao.com/tags/node/"/>
    
      <category term="supertest" scheme="http://lucyhao.com/tags/supertest/"/>
    
  </entry>
  
  <entry>
    <title>利用d3-cloud来展现标签云</title>
    <link href="http://lucyhao.com/2016/02/22/%E5%88%A9%E7%94%A8d3-cloud%E6%9D%A5%E5%B1%95%E7%8E%B0%E6%A0%87%E7%AD%BE%E4%BA%91/"/>
    <id>http://lucyhao.com/2016/02/22/利用d3-cloud来展现标签云/</id>
    <published>2016-02-22T09:34:50.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>效果： <a href="http://lucyhao.com/tags/">http://lucyhao.com/tags/</a></p><blockquote><p>最近把这个功能改成了hexo的plugin,这样更方便一点，地址：<a href="https://github.com/lucyhao/hexo-d3cloudtag" target="_blank" rel="noopener">https://github.com/lucyhao/hexo-d3cloudtag</a></p></blockquote><hr><p>hexo自带的tag cloud的标签展现不太美观，想能够展现出“云”效果的标签。在网上找到了d3-cloud这个项目，github地址：<a href="https://github.com/jasondavies/d3-cloud" target="_blank" rel="noopener">https://github.com/jasondavies/d3-cloud</a>  demo地址：<a href="https://www.jasondavies.com/wordcloud/" target="_blank" rel="noopener">https://www.jasondavies.com/wordcloud/</a>  </p><p>hexo生成的是静态博客，所以最后在网上看到的都是静态的内容，也就是说，我们的看到的标签云也是静态的已经生成好的内容，并不会随着刷新页面而重新计算生成另外样式的标签云。</p><p>当然d3-cloud这个项目，提供了浏览器端和node端运行的版本，见它的例子，我们可以在客户端运行，也可以在服务端作为  node运行。</p><a id="more"></a><h4 id="如何在hexo搭建的博客系统中使用呢？"><a href="#如何在hexo搭建的博客系统中使用呢？" class="headerlink" title="如何在hexo搭建的博客系统中使用呢？"></a>如何在hexo搭建的博客系统中使用呢？</h4><p>（1）hexo中提供的tag cloud.js的方法，在你的blog项目中，node_modules -&gt; hexo -&gt;plugins -&gt; helper -&gt; tagcloud.js</p><p>（2）本博客使用的是icarus主题，在主题下的layout-&gt;tags.ejs 文件中加载目录tags下面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//这里加载了标签云，tagcloud也就是(1)中tagcloud.js提供的功能</span><br><span class="line">  &lt;div class=&quot;layout-wrap-inner tag-cloud&quot;&gt;</span><br><span class="line">    &lt;% if(site.tags.length) &#123; %&gt;</span><br><span class="line">    &lt;%- tagcloud() %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>由上所知 ，要修改hexo中的tagcloud, 只要修改tag cloud.js函数就可以啦～</p><p>现在我们来看看d3-cloud这个项目，如何把它与tagcloud结合起来。 首先，d3-cloud提供了在浏览器和在服务端运行的方式，见他的例子node.js和browserify.js。两个不同版本的原因，是因为在计算字符串的宽度的时候，利用了canvas的mesureText接口。在d3-cloud的 index.js源码中可以看到，有一行代码是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloudCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);<span class="comment">//生成虚拟的canvas</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在计算标签云的时候，要保证标签之间不重叠，需要知道标签的宽度，高度；而js语言是不具备这个能力可以计算出来的，要不就是借助浏览器，生成一个dom，比如span标签，把字符串的内容放到span中，设置span的属性为字符串需要显示的属性，然后获取span的宽度。在d3-cloud中，则是直接利用canvas的接口来实现的。所以在客户端的版本中，浏览器提供的canvas功能；而在node版本中则需要 node-canvas模块。</p><p>由于我们是在hexo的“后台”来运行标签云的算法，得到静态的构造好的标签输出到页面上，所以我们应该选择用node版本。当然也可以用browserify.js版本，毕竟他就是一个运行在浏览器中的js, 放到博客的js中也是可以的，后续会介绍。</p><h5 id="利用node-canvas遇到的问题"><a href="#利用node-canvas遇到的问题" class="headerlink" title="利用node-canvas遇到的问题"></a>利用node-canvas遇到的问题</h5><blockquote><p>node-canvas模块的mesureText对于中文的支持有bug，在chrome中，同样的中文字符串”你好”的宽度是33.＊；而用node-canvas的到的“你好”的宽度只有8.＊</p></blockquote><p>怎么办？我投机取巧的用两个英文字符“ab”代替一个中文字符，然后计算字符串的长度，这样的到的长度只是近似长度。</p><h4 id="正式开始修改hexo的到d3-cloud的标签云"><a href="#正式开始修改hexo的到d3-cloud的标签云" class="headerlink" title="正式开始修改hexo的到d3-cloud的标签云"></a>正式开始修改hexo的到d3-cloud的标签云</h4><p>(1)安装需要的模块:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install canvas --save</span><br><span class="line"><span class="meta">$</span> npm install d3-cloud --save</span><br><span class="line"><span class="meta">$</span> npm install d3 --save(可选)</span><br></pre></td></tr></table></figure><p>(2)找到文件： 你的 blog项目 -&gt; node_modules -&gt; hexo -&gt;plugins -&gt; helper -&gt; index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tagcloud = <span class="built_in">require</span>(<span class="string">'./tagcloud'</span>);</span><br><span class="line">helper.register(<span class="string">'tagcloud'</span>, tagcloud);</span><br><span class="line">helper.register(<span class="string">'tag_cloud'</span>, tagcloud);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改为下面的代码：目的是不直接修改tagcloud.js，保留代码</span></span><br><span class="line"><span class="keyword">var</span> tagcloud = <span class="built_in">require</span>(<span class="string">'./tagcloud'</span>);</span><br><span class="line"><span class="keyword">var</span> tagcloudd3 = <span class="built_in">require</span>(<span class="string">'./tagcloudd3'</span>);</span><br><span class="line">helper.register(<span class="string">'tagcloud'</span>, tagcloudd3);</span><br><span class="line">helper.register(<span class="string">'tag_cloud'</span>, tagcloudd3);</span><br></pre></td></tr></table></figure><p>(3)新建文件tagcloudd3.js ：位置在blog项目 -&gt; node_modules -&gt; hexo -&gt;plugins -&gt; helper -&gt; tagcloudd3.js</p><p>(4)tagcloudd3.js的 内容如下： </p><ul><li>代码中引用了d3 来给标签fill颜色，可以去掉，也可以像tagcloud一样根据是否需要颜色来设置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Canvas = <span class="built_in">require</span>(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> cloud = <span class="built_in">require</span>(<span class="string">"d3-cloud"</span>);</span><br><span class="line"><span class="keyword">var</span> d3 = <span class="built_in">require</span>(<span class="string">"d3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> layout = cloud()<span class="comment">//利用d3-cloud计算每个标签的位置</span></span><br><span class="line">    .size([<span class="number">600</span>, <span class="number">400</span>])</span><br><span class="line">    .canvas(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Canvas(<span class="number">1</span>, <span class="number">1</span>); &#125;)</span><br><span class="line">    .padding(<span class="number">7</span>)</span><br><span class="line">    .rotate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> ~~(<span class="built_in">Math</span>.random() * <span class="number">2</span>) * <span class="number">90</span>; &#125;)</span><br><span class="line">    .font(<span class="string">"Impact"</span>)</span><br><span class="line">    .fontSize(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.size; &#125;);</span><br><span class="line"><span class="keyword">var</span> fill = d3.scale.category20();<span class="comment">//利用d3的接口给每个标签颜色</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tagcloudHelper</span>(<span class="params">tags</span>)</span>&#123;</span><br><span class="line">  <span class="comment">/****与tagcloud.js一样，获得tags 开始***/</span></span><br><span class="line">  <span class="keyword">if</span> ((!tags || !tags.hasOwnProperty(<span class="string">'length'</span>)))&#123;</span><br><span class="line">    tags = <span class="keyword">this</span>.site.tags;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!tags || !tags.length) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">  tags = tags.sort(<span class="string">'name'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ignore tags with zero posts</span></span><br><span class="line">  tags = tags.filter(<span class="function"><span class="keyword">function</span>(<span class="params">tag</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tag.length;</span><br><span class="line">  &#125;);</span><br><span class="line"> <span class="comment">/****与tagcloud.js一样，获得tags 结束***/</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//计算标签出现次数最大值，比如，博客中一共有两个标签，一个是hello,一个是world,hello出现2次，world 出现1次，那么maxsize就是2</span></span><br><span class="line">  <span class="keyword">var</span> maxsize = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  tags.sort(<span class="string">'length'</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">tag</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = tag.length;</span><br><span class="line">    <span class="keyword">if</span>(length &gt; maxsize)</span><br><span class="line">        maxsize = length;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//构建传入layout的words</span></span><br><span class="line">  <span class="keyword">var</span> arr = [],words;</span><br><span class="line">  tags.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">tag</span>)</span>&#123;</span><br><span class="line">     arr.push(&#123;<span class="string">"name"</span>: tag.name,<span class="string">"num"</span> : tag.length&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  words = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> text = d.name.replace(<span class="regexp">/[^\x00-\xff]/g</span>,<span class="string">"ab"</span>);<span class="comment">//对中文的投机处理，用ab代替中文字符</span></span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">name</span>:d.name, <span class="attr">text</span>: text, <span class="attr">size</span> : <span class="built_in">Math</span>.log(d.num)/(<span class="built_in">Math</span>.log(maxsize)-<span class="built_in">Math</span>.log(<span class="number">1</span>)) * <span class="number">15</span> + <span class="number">30</span>&#125;;<span class="comment">//size的计算取对数，是为了让标签之间的大小相对平均一些。因为博客侧重前端内容，所以某一些标签会比较多，标签最大最小次数的差距会比较大。</span></span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line">  layout.words(words);</span><br><span class="line">  layout.start();</span><br><span class="line"></span><br><span class="line">  result.push(<span class="string">'&lt;svg width="600" height="400"&gt;&lt;g transform="translate(300,200)"&gt;'</span>);</span><br><span class="line">  words.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">word,i</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    result.push(</span><br><span class="line">      <span class="string">'&lt;text text-anchor="middle" fill="'</span>+fill(i)+<span class="string">'" transform="translate('</span>+word.x+<span class="string">','</span>+word.y+<span class="string">')rotate('</span>+</span><br><span class="line">        word.rotate+<span class="string">')" style="font-size:'</span>+word.size+<span class="string">'px;font-family:Impact"&gt;'</span>+</span><br><span class="line">        word.name+</span><br><span class="line">      <span class="string">'&lt;/text&gt;'</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">  result.push(<span class="string">'&lt;/g&gt;&lt;/svg&gt;'</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result.join(<span class="string">''</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = tagcloudHelper;</span><br></pre></td></tr></table></figure><p>(5)运行hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo s</span><br></pre></td></tr></table></figure><p>如图所示得到自己的标签云：</p><p><img src="http://3gimg.qq.com/map_site_cms/dcfe/ppt/tags.png" alt="tags"></p><p>(6)上传自己的博客,  没问题以后，就生成静态博客，并上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo g</span><br><span class="line"><span class="meta">$</span> hexo d</span><br></pre></td></tr></table></figure><h5 id="简单说下在客户端引用d3-cloud"><a href="#简单说下在客户端引用d3-cloud" class="headerlink" title="简单说下在客户端引用d3-cloud"></a>简单说下在客户端引用d3-cloud</h5><p>(1) browserify编译d3-cloud提供的browserify.js例子，得到tagtest.js 文件，里面把d3,d3-cloud，d3-dispatch打包到了一起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> browserify broswerify.js &gt; tagtest.js</span><br></pre></td></tr></table></figure><p>(2)把index.js放到目录: 你的主题－&gt;source -&gt; js -&gt; tagtest.js</p><p>(3)把index引用入到你的主题中 &lt;%- js(‘js/tagtest’) %&gt;</p><p>(4)修改tagtest.js中的代码，把words的部分修改成接受传参的形式，在tags.ejs中用site.tags把tags的参数传进去</p><blockquote><p>这样会在博客中引入一大段js,个人觉得有点不符合静态博客小而轻～</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;效果： &lt;a href=&quot;http://lucyhao.com/tags/&quot;&gt;http://lucyhao.com/tags/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近把这个功能改成了hexo的plugin,这样更方便一点，地址：&lt;a href=&quot;https://github.com/lucyhao/hexo-d3cloudtag&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/lucyhao/hexo-d3cloudtag&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;hexo自带的tag cloud的标签展现不太美观，想能够展现出“云”效果的标签。在网上找到了d3-cloud这个项目，github地址：&lt;a href=&quot;https://github.com/jasondavies/d3-cloud&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/jasondavies/d3-cloud&lt;/a&gt;  demo地址：&lt;a href=&quot;https://www.jasondavies.com/wordcloud/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jasondavies.com/wordcloud/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;hexo生成的是静态博客，所以最后在网上看到的都是静态的内容，也就是说，我们的看到的标签云也是静态的已经生成好的内容，并不会随着刷新页面而重新计算生成另外样式的标签云。&lt;/p&gt;
&lt;p&gt;当然d3-cloud这个项目，提供了浏览器端和node端运行的版本，见它的例子，我们可以在客户端运行，也可以在服务端作为  node运行。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://lucyhao.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="hexo" scheme="http://lucyhao.com/tags/hexo/"/>
    
      <category term="tagcloud" scheme="http://lucyhao.com/tags/tagcloud/"/>
    
  </entry>
  
  <entry>
    <title>简单聊聊touch事件</title>
    <link href="http://lucyhao.com/2016/02/03/%E7%AE%80%E5%8D%95%E8%81%8A%E8%81%8Atouch%E4%BA%8B%E4%BB%B6/"/>
    <id>http://lucyhao.com/2016/02/03/简单聊聊touch事件/</id>
    <published>2016-02-03T07:09:57.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这几天在整理之前的内容，把散落在各地的东西都整理在一起，一篇14年的文章，收录到这里;主要是对移动端touch事件的一些说明</p></blockquote><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>众前端同学应该都处理过PC时代的鼠标click事件，随着时间的发展，我们的领域从PC蔓延到了移动端，从最熟悉的click变化成了触摸touch。<strong>鼠标 click</strong>-&gt;<strong>手指、触摸笔等等 touch</strong></p><a id="more"></a> <h2 id="开启触摸“时代”"><a href="#开启触摸“时代”" class="headerlink" title="开启触摸“时代”"></a>开启触摸“时代”</h2><h3 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h3><blockquote><p><strong>接口</strong></p><p><code>TouchEvent</code>代表当触摸行为在平面上变化的时候发生的事件</p><p><code>Touch</code> 代表用户与触摸平面间的一个触摸点</p><p><code>TouchList</code> 代表一系列的Touch；一般用户多个触摸点触碰平面的时候</p><p><code>DocumentTouch</code> 包含了一些创建Touch和TouchList对象的方法 ——<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Events/Touch_events" target="_blank" rel="noopener">MDN: Touch Events</a></p></blockquote><h3 id="TouchEvent接口"><a href="#TouchEvent接口" class="headerlink" title="TouchEvent接口"></a>TouchEvent接口</h3><ul><li><p>类型： touchstart、touchmove、touchend、touchenter、touchleave、touchcancel</p></li><li><p>属性：altkey、changedTouchs、ctrlKey、metaKey、shiftKey、targetTouches、touches、type、target</p><p>——<a href="http://codepen.io/lilyH/pen/PwWGjo" target="_blank" rel="noopener">例子</a></p></li></ul><h3 id="常用的touch事件类型"><a href="#常用的touch事件类型" class="headerlink" title="常用的touch事件类型"></a>常用的touch事件类型</h3><ul><li>touchstart : 手指放在一个dom元素上</li><li>touchmove: 手指拖动一个dom元素</li><li>touchend: 手指从一个dom元素上移开</li><li>touchenter : 移动的手指进入一个dom元素</li><li>touchleave : 移动的手指离开一个dom元素</li><li>touchcancel : 触摸中断</li></ul><h3 id="TouchEvent事件注意点"><a href="#TouchEvent事件注意点" class="headerlink" title="TouchEvent事件注意点"></a>TouchEvent事件注意点</h3><p>可以通过检查触摸事件的TouchEvent.type属性来确定当前事件属于哪种类型</p><blockquote><p>注意：在很多情况才，触摸事件和鼠标事件会同时被触发（目的是让没有对触摸设备优化的代码仍然可以在触摸设备上正常工作）。如果你使用了触摸事件，可以调用<code>event.preventDefault()</code>来阻止鼠标事件被触发</p></blockquote><h3 id="看看这些常用的手势"><a href="#看看这些常用的手势" class="headerlink" title="看看这些常用的手势"></a>看看这些常用的手势</h3><p><img src="http://p7.qhimg.com/d/inn/e7c9fec7/touchType.jpg" alt="各种手势"></p><p>推荐一个js手势库：<a href="http://hammerjs.github.io/" target="_blank" rel="noopener">Hammer.js</a></p><h2 id="zepto-touch"><a href="#zepto-touch" class="headerlink" title="zepto touch"></a>zepto touch</h2><h3 id="300ms延迟"><a href="#300ms延迟" class="headerlink" title="300ms延迟"></a>300ms延迟</h3><p>在手机上，touchstart的触发时间与最后click的触发时间的时间延迟</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><blockquote><p>追溯到07年Apple准备发布  iPhone的时候，当时为了解决手机上web页面太小的问题，所以有了“双击屏幕放大”的功能（double tap to zoom）</p></blockquote><blockquote><p>“双击屏幕放大”的功能导致了300MS的click事件的延迟，因为当用户触摸屏幕的时候，浏览器不知道用户是要double tap吗？还是要click？所以浏览器在第一次tap事件之后会等300MS来判断到底是double tap 还是click</p></blockquote><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>-浏览器层面：在meta里面，加入信息，阻止双击放大的功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width-device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>-代码层面：fastclick.js</p><p>-代码：利用touchstart、touchmove等内置事件的封装，来实现手机上的各种手势，比如tap、swipe等</p><h3 id="zepto-touch如何解决"><a href="#zepto-touch如何解决" class="headerlink" title="zepto-touch如何解决"></a>zepto-touch如何解决</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(documnet)</span><br><span class="line">.on(<span class="string">'touchstart ...'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">now = <span class="built_in">Date</span>.now()</span><br><span class="line">delta = now - (touch.last || now)</span><br><span class="line"><span class="keyword">if</span>(delta &gt; <span class="number">0</span> &amp;&amp; delta &lt;=<span class="number">250</span> )touch.isDoubleTap = <span class="literal">true</span></span><br><span class="line">touch.last = now</span><br><span class="line">&#125;)</span><br><span class="line">.on(<span class="string">'touchmove ...'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">&#125;)</span><br><span class="line">.on(<span class="string">'touchend ...'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(deltaX &lt; <span class="number">30</span> &amp;&amp; deltaY &lt; <span class="number">30</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> event = $.Event(<span class="string">'tap'</span>)</span><br><span class="line">touch.el.trigger(event)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>一句话总结：<strong>touch模块绑定事件touchstart、touchmove、touchend到document上，然后通过计算事件触发的时间差、位置差来实现自定义的tap、swipe等</strong></p></blockquote><h3 id="Ghost-Click"><a href="#Ghost-Click" class="headerlink" title="Ghost Click"></a>Ghost Click</h3><ul><li><p>当手指触摸到屏幕上的时候触发touchstart事件</p></li><li><p>当手指离开屏幕的时候触发touchend事件</p></li><li><p>浏览器等待300ms看是否有另外一个tap事件</p></li><li><p>如果没有另外的这个tap事件，那么click事件就会被触发，这就是ghost click</p><h3 id="zepto-touch的一个小问题"><a href="#zepto-touch的一个小问题" class="headerlink" title="zepto touch的一个小问题"></a>zepto touch的一个小问题</h3><p>没有阻止ghost click的发生 <a href="http://codepen.io/lilyH/pen/YPNBJG?editors=101" target="_blank" rel="noopener">例子</a></p><h3 id="如何阻止Ghost-click"><a href="#如何阻止Ghost-click" class="headerlink" title="如何阻止Ghost click"></a>如何阻止Ghost click</h3></li><li><p>在touchstart的时候调用preventDefault()，在大多数的浏览器上能解决这个问题，但是在这个dom元素上就不能触发scrolling滚动</p></li><li><p>在touchend的时候调用preventDefault()，不过只有一小部分的浏览器支持</p></li><li><p>如果页面是不可scalable的时候，一些浏览器不会等待300ms去触发click，click会在touchend的时候很快的触发，这个时候可以用click来代替tap</p></li></ul><p>——<a href="http://mlaval.github.io/ghostclick/" target="_blank" rel="noopener">小测试</a></p><blockquote><p>以上的三种方法基本就没有解决问题</p></blockquote><p>看看一个关于上面各种方法解决问题的测试图</p><p><img src="http://p5.qhimg.com/d/inn/dbb7c679/2.png" alt=""></p><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><ul><li>touchstart、touchmove、touchend事件绑定到document上</li><li>事件冒泡</li><li>事件触发时位于当前页面最前面的元素</li></ul><blockquote><p>用preventDefault()只是阻止默认行为，不会阻止事件的冒泡的行为，最后事件还是会冒泡到document上，此时，如果绑定了click事件的dom元素位于页面的最前面，就会触发click事件的发生 </p></blockquote><p>回顾下事件的捕获和冒泡行为</p><p><img src="http://p0.qhimg.com/d/inn/30706688/3.png" alt="事件行为"></p><h3 id="问题假设"><a href="#问题假设" class="headerlink" title="问题假设"></a>问题假设</h3><blockquote><p><strong>不要把事件绑定到document上，然后利用preventDefault()， 是否能解决此问题？</strong></p></blockquote><h2 id="重写touch模块"><a href="#重写touch模块" class="headerlink" title="重写touch模块"></a>重写touch模块</h2><p><a href="https://github.com/lucyhao/touch" target="_blank" rel="noopener">源码</a></p><h3 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h3><ul><li>过touchstart，touchmove，touchend这些内置的事件来实现tap，swipe等手势</li><li>计算touch事件触发的时间差，位置差来实现了自定义的tap，swipe等事件</li><li>tap，swipe这些事件通过自定义事件来触发</li></ul><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><blockquote><p>内置的事件会由浏览器根据某些操作进行触发，</p><p>自定义的事件就需要人工触发</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建haosou事件</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> Event(<span class="string">'haosou'</span>);</span><br><span class="line"><span class="comment">//监听haosou事件</span></span><br><span class="line">elem.addEventListener(<span class="string">'haosou'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;...&#125;,<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//分发haosou事件</span></span><br><span class="line">elem.dispatchEvent(event);</span><br></pre></td></tr></table></figure><p>——<a href="http://codepen.io/lilyH/pen/OPWBmp?editors=101" target="_blank" rel="noopener">例子</a></p><h3 id="主代码片段1"><a href="#主代码片段1" class="headerlink" title="主代码片段1"></a>主代码片段1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//为特定的元素绑定touch事件</span></span><br><span class="line">el.addEventListener(<span class="string">'touchstart'</span>, func, <span class="literal">false</span>);</span><br><span class="line">el.addEventListener(<span class="string">'touchmove'</span>, func, <span class="literal">false</span>);</span><br><span class="line">el.addEventListener(<span class="string">'touchend'</span>, func, <span class="literal">false</span>);</span><br><span class="line">el.addEventListener(<span class="string">'touchcancel'</span>, func, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="主代码片段2"><a href="#主代码片段2" class="headerlink" title="主代码片段2"></a>主代码片段2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在touchend的时候实现自定义的事件</span></span><br><span class="line"><span class="keyword">var</span> evt = createCustomEvent(<span class="string">'tap'</span>,e);</span><br><span class="line"><span class="keyword">if</span> (evt &amp;&amp; !e.target.dispatchEvent(evt) )&#123;</span><br><span class="line">     e.preventDefault();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="主代码片段3"><a href="#主代码片段3" class="headerlink" title="主代码片段3"></a>主代码片段3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCustomEvent</span>(<span class="params">touchName,detail</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> evt;</span><br><span class="line">        <span class="keyword">var</span> params = &#123;</span><br><span class="line">            bubbles:<span class="literal">true</span>,</span><br><span class="line">            cancelable: <span class="literal">true</span>,</span><br><span class="line">            detail: detail ? detail : <span class="literal">undefined</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.CustomEvent) &#123;</span><br><span class="line">            evt = <span class="keyword">new</span> <span class="built_in">window</span>.CustomEvent(touchName, &#123;</span><br><span class="line">                bubbles: params.bubbles,</span><br><span class="line">                cancelable: params.cancelable,</span><br><span class="line">                detail : params.detail</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              evt = <span class="built_in">document</span>.createEvent(<span class="string">"CustomEvent"</span>);</span><br><span class="line">              evt.initCustomEvent(touchName, params.bubbles, params.cancelable, params.detail);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">              <span class="comment">//某些老版本的2.3手机不支持CustomEvent，比如索爱2.3系统</span></span><br><span class="line">              evt = <span class="built_in">document</span>.createEvent(<span class="string">"Event"</span>);</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> param <span class="keyword">in</span> params) &#123;</span><br><span class="line">                  evt[param] = params[param];</span><br><span class="line">              &#125;</span><br><span class="line">              evt.initEvent(touchName, params.bubbles, params.cancelable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> evt;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="假设成立吗？"><a href="#假设成立吗？" class="headerlink" title="假设成立吗？"></a>假设成立吗？</h3><p>如果在touchstart上用preventDefault(),没办法使用事件代理</p><h4 id="强行阻止掉click"><a href="#强行阻止掉click" class="headerlink" title="强行阻止掉click"></a>强行阻止掉click</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阻止点click事件的发生，</span></span><br><span class="line"><span class="comment">//保证在同一个位置的tap事件以后，不会再有click事件</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> time_threshold = <span class="number">500</span>,</span><br><span class="line">             space_threshold = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().valueOf() - <span class="keyword">this</span>.endTime &lt;= time_threshold </span><br><span class="line">            &amp;&amp; <span class="built_in">Math</span>.abs(e.clientX-<span class="keyword">this</span>.endX)&lt;=space_threshold</span><br><span class="line">            &amp;&amp; <span class="built_in">Math</span>.abs(e.clientY-<span class="keyword">this</span>.endY)&lt;=space_threshold) &#123;</span><br><span class="line">                  e.stopPropagation();</span><br><span class="line">                  e.preventDefault();</span><br><span class="line">         &#125;</span><br><span class="line">  &#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="在业务中发展"><a href="#在业务中发展" class="headerlink" title="在业务中发展"></a>在业务中发展</h3><ul><li>需要触发子元素的click事件</li><li>swipe不能满足，需要在滑动过程监听事件</li></ul><blockquote><p>最后发展出的独立touch模块事件：</p><p><code>tap</code>   //轻点触摸支持click </p><p><code>tapnoclick</code> //轻点触摸去掉click</p><p><code>swipeleft</code>  // 左滑，在手指离开屏幕以后触发</p><p><code>swiperight</code> // 右滑，在手指离开屏幕以后触发</p><p><code>panleft</code> // 左滑，在手指在屏幕上滑动时触发</p><p><code>panright</code> // 右滑，在手指在屏幕上滑动式触发</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这几天在整理之前的内容，把散落在各地的东西都整理在一起，一篇14年的文章，收录到这里;主要是对移动端touch事件的一些说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;众前端同学应该都处理过PC时代的鼠标click事件，随着时间的发展，我们的领域从PC蔓延到了移动端，从最熟悉的click变化成了触摸touch。&lt;strong&gt;鼠标 click&lt;/strong&gt;-&amp;gt;&lt;strong&gt;手指、触摸笔等等 touch&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://lucyhao.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="移动web开发" scheme="http://lucyhao.com/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="touch" scheme="http://lucyhao.com/tags/touch/"/>
    
  </entry>
  
  <entry>
    <title>移动web开发初级攻略</title>
    <link href="http://lucyhao.com/2016/02/03/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E5%88%9D%E7%BA%A7%E6%94%BB%E7%95%A5/"/>
    <id>http://lucyhao.com/2016/02/03/移动web开发初级攻略/</id>
    <published>2016-02-03T02:30:56.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这几天在整理之前的内容，把散落在各地的东西都整理在一起，一篇14年的文章，收录到这里;主要是纪录在移动端web开发的时候最基本的一些入门知识</p></blockquote><p>这是一篇普及性质的文章，内容浅显明了。也算是对移动web开发的入门做了一个总结式的简介。已经有移动web开发经验的同学可以绕道，还没有入门的同学可以留意下，也许你能从此跨入移动web开发的大门，希望你能有所收获。</p><p>整篇的内容会分为5个部分，第一部分是关于移动端的常用布局思路，第二部关于图片和文字，第三部分是动画，第四部分是事件，最后一部分是关于单页应用。</p><a id="more"></a><h4 id="关于布局"><a href="#关于布局" class="headerlink" title="关于布局"></a>关于布局</h4><blockquote><p>攻略推荐：flexbox。flexbox弹性布局，背后的思想就是使得容器中的项目块能够改变宽度和高度来最佳地填充可用的空间（为了适应不同类型的设备和屏幕宽度）。在移动端利用flexbox可以简单方便的满足我们的很多需求。我们先看看它在移动端的支持情况吧。</p></blockquote><p><img src="http://3gimg.qq.com/map_site_cms/dcfe/blog/flexbox.png" alt="flexbox的适用性"></p><p>图1 flexbox的适用性</p><p>图来自caniuse网站, 大家可以通过此网站查询关于css3和html5的浏览器支持情况。图1只是部分的支持情况，完整的图可以自行在caniuse网站上查看。从图1可以看出，flexbox在移动端的支持情况还是很乐观的，另外Android2.3也是支持的，不过是支持老版本的规范而已。</p><p>简单说明下，flexbox的语法到目前为止有三种，最老的是09年的老语法（display：box），其次是11年的语法（display：flexbox），然后才是最新的语法（display：flex）。不同的浏览器使用flexbox的时候，css的前缀也不相同。有工具<a href="http://the-echoplex.net/flexyboxes/" target="_blank" rel="noopener">flexbox兼容语法工具</a>方便大家能够写出兼容的flexbox代码。</p><p>flexbox的大致情况如上所述，它的主要用途在于组件级的布局，下面列举一个最常见的上中下三列布局。如下图2所示，在实际的开发过程中，我们会遇到这样的需求。在内容不满一屏的时候，主内容区域也需要撑满整个空白的区域，尾部位于最低端。</p><p><img src="http://3gimg.qq.com/map_site_cms/dcfe/blog/main.png" alt="主内容撑满整个空白区域"></p><p>图2 主内容撑满整个空白区域</p><p>在PC上，我们会很自然的想到利用position:fixed的属性来解决固定的问题，可是在移动端position:fixed因为支持程度的问题（Android2.X和IOS5之下）不得不抛弃，取而代之的利用flexbox的属性来解决。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTML代码片断:</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">css</span>代码片断:</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">       <span class="attribute">position</span>:absolute;<span class="attribute">top</span>:<span class="number">0px</span>;<span class="attribute">bottom</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">       <span class="attribute">overflow</span>:hidden</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">min-height</span>:<span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">display</span>: -moz-box;</span><br><span class="line">    <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">-webkit-box-direction</span>: normal;</span><br><span class="line">    <span class="attribute">-moz-box-direction</span>: normal;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">    <span class="attribute">-moz-box-orient</span>: vertical;</span><br><span class="line">    <span class="attribute">-webkit-flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">-ms-flex-direction</span>: column;</span><br><span class="line">     <span class="attribute">flex-direction</span>: column;</span><br><span class="line">     <span class="attribute">-webkit-flex-wrap</span>: nowrap;</span><br><span class="line">     <span class="attribute">-ms-flex-wrap</span>: nowrap;</span><br><span class="line">     <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">   <span class="attribute">flex-grow</span>:<span class="number">1</span>;</span><br><span class="line">   <span class="attribute">-moz-box-flex</span>: <span class="number">1</span>;</span><br><span class="line">   <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</span><br><span class="line">   <span class="attribute">box-flex</span>: <span class="number">1</span>;</span><br><span class="line">   <span class="attribute">overflow</span>:auto</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>:<span class="number">100%</span>;<span class="attribute">height</span>:<span class="number">30px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段css里面包括了很多兼容性的代码。再比如一个最常见的问题：完美居中。用flexbox的属性进行布局就再简单优美不过了。如下面css代码段。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">height </span>: <span class="number">300px</span> <span class="comment">/*或者其他*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>; <span class="comment">/*或者其他*/</span></span><br><span class="line">　　<span class="attribute">height</span>: <span class="number">100px</span>; <span class="comment">/*或者其他*/</span></span><br><span class="line">　　<span class="attribute">margin</span>: auto; <span class="comment">/*这里就是神奇的地方*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完美居中的原理就是依赖于margin值设置为auto来吸收到额外的空间。所以设置一个margin为auto 的值能够使得内容完美的居中于两个轴之间。</p><p>flexbox的各种属性还有很多有趣又实用的用法，大家平时可以多多积累一些。最后列举一些w3c定义的最新flexbox的属性。</p><p>在父元素上使用的属性：</p><ul><li>display:flex 定义弹性容器</li></ul><ul><li>flex-direction 定义弹性内容主轴的方向</li></ul><ul><li>justify-content 定义弹性内容主轴的空白内容区域</li></ul><ul><li>align-items 定义弹性内容交叉轴的方向</li></ul><ul><li>align-content 定义弹性内容交叉轴的空白内容区域</li></ul><p>在子元素上使用的属性：</p><ul><li>order 定义弹性内容的顺序</li></ul><ul><li>flex-grow 定义弹性内容增长</li></ul><ul><li>flex-shrink 定义弹性内容收缩</li></ul><ul><li>flex-basis 定义弹性内容基准伸缩值</li></ul><ul><li>align-self 覆盖默认的对齐方式</li></ul><h4 id="关于图片和文字"><a href="#关于图片和文字" class="headerlink" title="关于图片和文字"></a>关于图片和文字</h4><h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h5><p>要彻底的讲清楚移动端的图片设置其实还是一个巨大的工作量，需要从设备分辨率说起。简单来说有下面几条：</p><p>(1) 设备像素比 = 物理像素/设备独立像素</p><p>(2) 常用的针对移动端的优化设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>(3) 如果设备像素比计算出来是1，根据(2)的设置那么页面也是1：1显示在屏幕上；如果设备像素比计算出来是2，那么页面会2：1的显示在屏幕上，此时图片就会被拉大到成原来的2倍。</p><p>上面的3条会引发出三个问题：第2条的设置有什么作用？计算出来的设备像素比是什么？设备像素比为什么会影响页面的显示？</p><p>回答第一个问题：width=device-width 表示页面宽度等于设备宽度，也就是说页面会以设备宽度的大小显示出来。这个时候，如果页面宽度与设备宽度匹配，假设都是320px，那么页面就是1：1的显示在屏幕上。如果页面宽度是320px，而设备宽度是640px，那么页面就会被拉大一倍显示在屏幕上。</p><p>回答第二个问题：物理像素就是设备实际的显示像素，在市面上看到的设备指标中的像素，比如某设备是640×480的像素，他的宽的物理像素就是640px；设备独立像素（dip或dp），1dp表示在屏幕点密度为160ppi时1px长度。可以用公式px=dp( ppi/160) 计算，公式可以变成px/dp = ppi/160，所以其实设备像素比，可以直接用ppi/160来计算。ppi是每英寸像素数，计算方法就是长宽各自平方之和开方，除以对角线长度（单位英寸）。比如：WVGA屏480*800，按3.8寸屏算，ppi就是 √ (480^2 + 800^2) / 3.8 = 245，约等于240，px/dp=1.5。</p><p>回答第三个问题：先看图3，retina屏（视网膜屏）的设备像素比是2，相对于非视网膜屏用1个像素显示，就需要4个像素来显示。假设我们的图片是50×50px大小的，在非视网膜屏上，图片上的一个1×1的像素对应于显示屏的1×1像素，正常显示；在视网膜屏上，图片上的一个1×1的像素就对应于显示屏的2×2像素，相当于把1个点放大在了4个点的宽高上，所以图像就虚了。</p><p><img src="http://3gimg.qq.com/map_site_cms/dcfe/blog/pixel.png" alt="高清屏上像素的显示"></p><p>图3  高清屏上像素的显示</p><p>所以，常常在设计的时候，会按照200%的比例来设计，一个宽度设置为50px的图片，实际上的大小是100px，这样可以兼容支持像配备retina屏的iPhone那样的像素密度高达320 dpi及以上的设备。不过这也同时会造成图片大小变大，页面速度、流量等问题的出现。</p><p>在实践中有以下几个思路：</p><blockquote><ul><li>最简单的方法高清大图仍然采用2倍的jpg图片；优化一些的方法，利用媒体查询-webkit-device-pixel-ratio来设置不同设备分辨率的图片 @media screen and (-webkit-device-pixel-ratio：2){ /<em>设备分辨率2时候的样式</em>/ }</li></ul><ul><li>小icon图，能用css伪类<a href="http://nicolasgallagher.com/pure-css-gui-icons/demo/" target="_blank" rel="noopener">css伪类写的各种图标</a>写的就不用图片了；webfonts在酷派手机上会有问题，保守还是直接用图吧</li></ul><ul><li>延迟加载、按需加载减少一次请求所有图片的手段也是需要同步加上的</li></ul></blockquote><p>顺带提一下设置全屏的背景图片时，宽大于高的图，如下代码段1会全屏撑开；高大于宽的图片，把background-size改成auto 100%。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码段1：</span><br><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:url(..)</span>;</span><br><span class="line"><span class="selector-tag">background-size</span><span class="selector-pseudo">:100</span>% <span class="selector-tag">auto</span>;</span><br><span class="line"><span class="selector-tag">background-repeat</span>: <span class="selector-tag">no-repeat</span>;</span><br></pre></td></tr></table></figure><h5 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h5><p>文字的大小也是我们在做网页的时候必须要设置的，关于px，em，rem单位度量的差别也是有各种文章详细的介绍。其中em和rem的区别在于，rem是相对于根元素的大小，em是相对于父元素的大小。移动端不考虑ie的情况，使用rem和em还是很推荐的。鉴于em的基准是相对于父元素，很容易计算出错，利用rem就比较简单。</p><p>如下例子所示，定义基准的根元素的大小，然后利用rem定义子元素的相对大小，同时利用media query来控制不同可视区域时根元素的字体大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size </span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (max-width:<span class="number">900px</span>)&#123;</span><br><span class="line">    html&#123;font-size：14px&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">3rem</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2.5rem</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>对于是否是“最佳实践”的问题，有一篇将<a href="http://responsivenews.co.uk/post/13925578846/fluid-grids-orientation-resolution-independence" target="_blank" rel="noopener">响应式布局的文章</a>给出了这样的设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">858px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">780px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">702px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">724px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">9px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (max-width: <span class="number">623px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">8px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后给出一些建议：</p><ul><li>使用16px的基准字体大小</li></ul><ul><li>利用media query来调整基准的字体大小</li></ul><ul><li>使用相对于基准字体大小的字体来排版</li></ul></blockquote><h4 id="关于动画"><a href="#关于动画" class="headerlink" title="关于动画"></a>关于动画</h4><p>css3在移动端的支持程度，使得我们在移动端的很多动画效果都可以直接采用css3来实现。当然关于css动画和javascript动画的性能问题也是讨论的轰轰烈烈。一句话概括就是各有利弊，各有千秋。</p><p>浏览器在处理css动画的时候是与“主线程”分开的，所谓的“主线程”就是javascript执行比如“布局”、“绘制”、“排版”这样的事情。所以这就意味着，当浏览器的主线程在工作的时候，css动画也能照常工作。transform和opacity这两个属性的改变，很多情况下是可以同时在css动画的线程中执行的，这两部分的改变也可以坚持使用css动画。</p><p>一些简单的，改变自己状态的UI元素的动画建议使用css动画；比如toggle这样的动画（出现、消失的来回切换）。</p><p>需要控制动画状态的，比如结束、暂停等动画，使用javascript。基于javascript的动画框架很多时候都能比基于css的动画框架提供更灵活、更复杂的动画效果。当然这些动画框架是纯为动画而生，并不是像jQuery这类核心在处理dom的框架，比如velocity.js、GSAP等。</p><p>不管是css动画还是javascipt动画只要触发了reflow和repaint，“主线程”都会被迫去工作。简单的移动翻转等动画能够使得页面看起来更加的酷炫，可是过多地使用动画也必然会照成页面出现卡顿等的现象。下面则会提到一些常用的优化手段。</p><p>（1）能用transition实现的动画，就不用animation（@keyframes）比如：</p><p>用transition实现旋转一圈360度：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"anim"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">.anim&#123;</span><br><span class="line">         -webkit-transition: all 1.5s linear;</span><br><span class="line">&#125;</span><br><span class="line">.anim:hover&#123;</span><br><span class="line">         -webkit-transform: rotate(360deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用animation实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"anim"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">.anim:hover&#123;</span><br><span class="line">     -webkit-animation-name:loading;</span><br><span class="line">     -webkit-animation-duration: 1.5s;</span><br><span class="line">     -webkit-animation-iteration-count:once;</span><br><span class="line">     -webkit-animation-timing-function: linear;</span><br><span class="line">&#125;</span><br><span class="line">@-webkit-keyframes loading&#123;</span><br><span class="line">     from &#123;-webkit-transform:rotate(0deg)&#125;</span><br><span class="line">     to &#123;-webkit-transform:rotate(360deg)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transition和animation有它们各自的适用场景，transition主要处理的是两个状态的变化，它的发生需要一些触发动作，比如:hover，media query的控制，class的改变等；animation可以用来处理更复杂一些的动画，不只是两个状态的变化，并且它的触发可以不通过用户的交互产生。</p><p>（2）使用translate3d(0,0,0)，强制浏览器进行硬件加速；不要使用过多，以免崩溃。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">css</span>代码段:</span><br><span class="line"><span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">translateZ</span>(0);</span><br><span class="line"><span class="selector-tag">-webkit-backface-visibility</span><span class="selector-pseudo">:hidden</span>;</span><br><span class="line"><span class="selector-tag">-webkit-perspective</span><span class="selector-pseudo">:1000</span>;</span><br></pre></td></tr></table></figure><p>硬件加速其实就是强制创建一个GPU层，把动画放到GPU上去完成，这样就不占用CPU的资源。一旦GPU层创建出来，GPU来处理像素的移动和复合是一件微不足道的事情。使用过多会造成性能下降的原因。</p><p><img src="http://3gimg.qq.com/map_site_cms/dcfe/blog/view.jpg" alt="浏览器渲染的过程"></p><p>图4 浏览器渲染过程</p><p><img src="http://3gimg.qq.com/map_site_cms/dcfe/blog/layer.png" alt="过多的使用硬件加速浏览器的渲染情况"></p><p>图5 <a href="http://wesleyhales.com/blog/2013/10/26/Jank-Busting-Apples-Home-Page/" target="_blank" rel="noopener">过多的使用硬件加速浏览器的渲染情况</a></p><p>图4是浏览器渲染的一个过程，我们就看最后一步composite layers合并图层。从图4中也可以看到transform和opacity两个属性只会影响到最后一步，不会产生严重的reflow和repaint，也印证了上面说的，这两个属性的改变大胆使用css动画。更重要的是，从图5（来自苹果官网分析的文章，见脚注5）我们看到，过多的GPU加速，虽然减少了浏览器前面步骤的开销，但是会大大加重最后一步合并图层的操作，甚至到了秒级。这也会严重影响页面的性能。如何优化这部分，可以在脚注5的文章中查到，利用chrome的开发者工具提供的功能，可以直接观察到页面上有哪些composite层，减少没有transform和opacity属性改变层的硬件加速能很好的解决滥用硬件加速的问题。</p><p>（3）javascript做动画的时候，使用requestAnimationFrame，避免使用setTimeout和setInterval。</p><p>在日常的页面性能中，动画达到60帧(frame per second，60fps)，就被视为一个理想的状态。60帧意味着16.7毫秒绘制一帧，如果使用setTimeout或者setInterval显然是不能达到要求的。这又牵扯到浏览器内置时钟的更新频率问题。总之，由于精确度的原因，使用setTimeout和setInterval是无法达到60帧这样的动画流程要求。</p><h4 id="关于事件"><a href="#关于事件" class="headerlink" title="关于事件"></a>关于事件</h4><p>也许这部分是改变最多的，实际运用中却可能也是改变最少的。说改变最多是因为我们已经进入了全新的touch时代，说改变最少是因为在实际操作中，用click等点击事件，也是可以的。移动和PC在事件上的一个很大区别就是，移动端新增了很多强大的手势操作，如图6所示，所有的手势都可以通过移动端内置的touchstart、touchmove、touchend、touchcancel等事件进行封装实现。</p><p><img src="http://3gimg.qq.com/map_site_cms/dcfe/blog/touch.jpg" alt="移动端的各种手势"></p><p>图6  移动端的各种手势</p><p>关于事件这部分有几个注意点：</p><p>（1）click事件在移动端同样可以使用，只是会有300ms的延迟；具体原因简单说就是浏览器分不清是click还是double tap造成。解决延迟的方案，使用fastclick.js（标准方案之一），代码段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  原理是：在touchEnd事件之后，立马实现一个合成的click事件并且阻止掉300ms以后那个真正的click事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener( <span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     FastClick.attach( <span class="built_in">document</span>.body );</span><br><span class="line">&#125;, <span class="literal">false</span> ); <span class="comment">//页面的click事件再也没有300ms延迟的烦恼</span></span><br></pre></td></tr></table></figure><p>或者使用touchstart等内置touch事件代替click，或者使用第三方封装的touch模块提供的tap等方法来代替click事件。</p><p>（2）移动端的手势模块，强大的比如<a href="http://hammerjs.github.io/" target="_blank" rel="noopener">hammer.js</a>，实现了绝大多数的手势事件；zepto的touch模块算是一个简单的手势库，鉴于很多网页的手势也不会很复杂，基本就是tap（轻触）、swipe（滑动）等，zepto的touch模块已经够用，不过会遭遇穿透的问题。所谓穿透问题，就是两个层，上面的层绑定的tap事件轻触以后消失，会触发下层的click的事件或者是a 元素的等的原生事件。</p><p>说到穿透问题就引出了移动端的一个情况。在很多情况下，触摸事件和鼠标事件会同时被触发（目的是让没有对触摸设备优化的代码仍然可以在触摸设备上正常工作）。如果你使用了触摸事件，可以调用event.preventDefault()来阻止鼠标事件被触发，这里不得不提到event.preventDefault()只有在touchstart的时候才能比较有效的阻止click事件的发生，但同时又会引起不能触发scrolling滚动的问题，如下图。</p><p><img src="http://3gimg.qq.com/map_site_cms/dcfe/blog/click.png" alt="click事件被触发的各种情况"></p><p>图7 click事件被触发的各种情况</p><p>解决方案可以延迟dom层的消失，还有其他的一些方法，比如重写zepto的touch模块等，见聊聊touch事件<a href="https://github.com/lilyImage/sharing/issues/1" target="_blank" rel="noopener"> 聊聊touch模块 </a></p><p>（3）用事件代理的方式绑定事件的时候，有些手机默认给出的触摸范围是在父元素的范围，无法定位到确定的元素上。可以利用CSS去掉浏览器原生的样式，再自定义样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.logo&#123;</span><br><span class="line">     -webkit-tap-highlight-color: rgba(0,0,0,0);</span><br><span class="line">     -webkit-tap-highlight-color: transparent; /* For some Androids */ &#125;</span><br><span class="line">.logo:active&#123; -webkit-transform: scale3d(0.9, 0.9, 1);//需要自定义一个active的动作 &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"logo"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">ontouchstart</span>=<span class="string">"return true;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提醒一句，有时候带有浏览器原生的样式，能带给用户更好的交互感。</p><h4 id="关于单页应用"><a href="#关于单页应用" class="headerlink" title="关于单页应用"></a>关于单页应用</h4><p>除了上面提到的布局、图片、文字、动画、事件，PC与移动的差异外。移动端出现了大量的单页应用。一方面因为PC上浏览器有很强的tab标签概念，在移动端，很多时候我们的网页是内嵌在webview中，用户更喜欢后退，而不是去选择tab标签；用单页构建应用会更接近原生的体验，从用户角度来说体验更佳，有更快的导航。另一方面单页应用还减少了带宽，降低了流量。需要的javascript文件只用在第一次的时候加载，服务端只用返回json数据，所有的页面html拼装工作都放到客户端来进行。</p><p>单页应用对于前端工程师来说，其实是加大了开发难度的。因为前端同学需要从整体的架构上来把握，比如考虑单页应用框架、前端模板、UI库、模块化开发、测试等等问题。当然这些问题在非单页应用中也是会涉及的。移动端单页应用的一个特点是，需要考虑转场动画，转场就是从第一个页面转到第二个页面，相信转场动画的出现也是来自于移动端的交互方式。所以说不同的交互方式会导致我们开发方式的变化。不去讨论单页应用这个巨大的话题，就单单讲一讲转场这方面。核心思路：多个页面层叠加，利用css3的transition属性进行层之间的转化。如何来做呢？</p><p>提供一种方法：每个单页层都利用position:absolute来固定，用hash标明不同的页面；单页之间切换的时候，利用transition来做切换动画。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*单页层代码片段：*/</span></span><br><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;<span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;<span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;<span class="selector-tag">right</span><span class="selector-pseudo">:0</span>;<span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;</span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;<span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%</span><br><span class="line"></span><br><span class="line"><span class="comment">/*切换动画(往左滑动100%，即该层整体往左滑动):*/</span></span><br><span class="line"><span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">translate3d</span>(100%, 0, 0);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate3d</span>(100%, 0, 0);</span><br></pre></td></tr></table></figure><p>当然在做页面层之间切换的时候，也有很多种的动画样式，比如是“盖上去”，还是“推出去”等。不同的动画对应不同的css手段。这方面也有专门的文章来介绍，下面就用一个简单的多页面切换的例子来结束这部分吧。如下图所示是两个页面层切换的场景。切换的时候第二层往左滑动盖在了第一层的上面。滑动的触发可以通过手指的滑动动作或者点击某个按钮、区域等。</p><p><img src="http://3gimg.qq.com/map_site_cms/dcfe/blog/slide.png" alt="页面层切换的一种场景"></p><p>图8 页面层切换的一种场景</p><p>下面提供了一个比较简单的切换页面层的例子，包括了html、css和JavaScript代码，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*JavaScript代码段：*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PageSwitcher</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentPage,</span><br><span class="line">        stateHistory = [];</span><br><span class="line">    <span class="keyword">this</span>.switchPage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> l = stateHistory.length,</span><br><span class="line">            state = <span class="built_in">window</span>.location.hash;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(state == stateHistory[l<span class="number">-2</span>])&#123;</span><br><span class="line">            page = currentPage.prev(<span class="string">'.page'</span>);</span><br><span class="line">            <span class="keyword">if</span>(page &amp;&amp; page.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                currentPage.attr(<span class="string">'class'</span>,<span class="string">'page transition right100'</span>);</span><br><span class="line">                currentPage = page;</span><br><span class="line">                stateHistory.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            page = currentPage.next(<span class="string">'.page'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(page &amp;&amp; page.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                stateHistory.push(state);</span><br><span class="line">                page.attr(<span class="string">'class'</span>,<span class="string">'page transition center'</span>);</span><br><span class="line">                currentPage = page;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,  </span><br><span class="line">    <span class="keyword">this</span>.init = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">        currentPage = obj.curPage;</span><br><span class="line">        stateHistory.push(obj.curHash);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*css代码段：*/</span></span><br><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;<span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page</span><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page</span><span class="selector-class">.transition</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transition-duration</span>: .<span class="number">25s</span>;</span><br><span class="line">    <span class="attribute">transition-duration</span>: .<span class="number">25s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page</span><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(100%, 0, 0);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(100%, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page</span><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(-100%, 0, 0);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-100%, 0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--html代码段：--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"current page center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#page2"</span> <span class="attr">class</span>=<span class="string">"btn btn-next"</span>&gt;</span>page2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page2 page right"</span> <span class="attr">style</span>=<span class="string">"background:lightgreen"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#page1"</span>&gt;</span>back<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> pageSlider = <span class="keyword">new</span> PageSwitcher();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">window</span>).on(<span class="string">'hashchange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">        pageSlider.switchPage();</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    pageSlider.init(&#123;<span class="attr">curPage</span> : $(<span class="string">'.current'</span>),<span class="attr">curHash</span>:<span class="string">'#page1'</span>&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本文从布局、图片、文字、动画、事件5个方面分别介绍了移动端与PC端的一些不同，并给出了一些在实际工作中常用方法的建议。最后从应用的层面上再一次地强调了移动端在用户交互上的改变，从而导致我们日常开发工作的改变。本文的内容可以算是移动端的基础入门，对其中某一方面感兴趣的都可以去做深入的研究，因为每一个分支在移动上都是一个全新的领域，需要我们去挖掘。前端开发作为一个端的开发分支，同样面临着跟其他客户端一样的问题，当我们的外部环境变化的时候，我们的技术储备，技术更新就需要更新换代。客户端开发遭遇了从PC客户端到Android等智能手机客户端的变迁，同样我们也是从PC时代步入移动时代。当我们在面临大的环境变革的时候，希望大家都能及时抓稳方向盘，积极地从内在的技术知识上进行变革，跟上这股浪潮而不是被它拍死在沙滩上。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这几天在整理之前的内容，把散落在各地的东西都整理在一起，一篇14年的文章，收录到这里;主要是纪录在移动端web开发的时候最基本的一些入门知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一篇普及性质的文章，内容浅显明了。也算是对移动web开发的入门做了一个总结式的简介。已经有移动web开发经验的同学可以绕道，还没有入门的同学可以留意下，也许你能从此跨入移动web开发的大门，希望你能有所收获。&lt;/p&gt;
&lt;p&gt;整篇的内容会分为5个部分，第一部分是关于移动端的常用布局思路，第二部关于图片和文字，第三部分是动画，第四部分是事件，最后一部分是关于单页应用。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://lucyhao.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="移动web开发" scheme="http://lucyhao.com/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>ngnix配置静态资源404问题</title>
    <link href="http://lucyhao.com/2016/02/01/ngnix%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90404%E9%97%AE%E9%A2%98/"/>
    <id>http://lucyhao.com/2016/02/01/ngnix配置静态资源404问题/</id>
    <published>2016-02-01T06:58:51.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍了ngnix的location的配置和反向代理的配置。配置ngnix反向代理，也是一种解决前端跨域访问的方法。另外还介绍了在实际使用中，由于配置其他服务的反向代理，导致静态资源获取404的问题总结。</p><a id="more"></a> <p>ngnix反向代理解决浏览器跨域、location加快静态资源的请求    </p><h4 id="location的配置"><a href="#location的配置" class="headerlink" title="location的配置"></a>location的配置</h4><p> 设置location是为了对请求的url 做一些特殊的操作，比如对静态文件做缓存等。</p><p>官方的文档见：<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_core_module.html#location</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">location @name &#123; ... &#125;</span><br><span class="line">Default:—</span><br><span class="line">Context:server, location</span><br></pre></td></tr></table></figure><ul><li>＝ 匹配表示是精确匹配</li></ul><ul><li>～ 匹配表示 区分大小写的正则匹配</li></ul><ul><li>～＊ 匹配表示 不区分大小写的正则匹配</li></ul><ul><li>^~ 以后面的字符串开头的匹配</li></ul><p>下面是一些常用的location的写法：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /documents/ &#123;</span><br><span class="line">  <span class="comment"># 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span></span><br><span class="line">  [ configuration C ] </span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /documents/ &#123;</span><br><span class="line">  <span class="comment"># 匹配任何以 /documents/ 开头的地址，匹配符合以后，停止往下搜索</span></span><br><span class="line">  [ configuration D ] </span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg)$</span> &#123;</span><br><span class="line">  <span class="comment"># 匹配所有以 gif,jpg或jpeg 结尾的请求</span></span><br><span class="line">  [ configuration E ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>从wiki上摘录的定义： </p><blockquote><p>在计算机网络中，反向代理是代理服务器的一种。它根据客户端的请求，从后端的服务器上获取资源，然后再将这些资源返回给客户端。与前向代理不同，前向代理作为一个媒介将互联网上获取的资源返回给相关联的客户端，而反向代理是在服务器端作为代理使用，而不是客户端。</p></blockquote><p>ngnix做反向代理简单配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">... </span><br><span class="line"><span class="attribute">upstream</span> multi_relation &#123;</span><br><span class="line">    <span class="comment"># 在ngnix这个机器的20000端口上启动的服务</span></span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:20000</span> weight=<span class="number">1</span> max_fails=<span class="number">5</span> fail_timeout=<span class="number">6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">root</span> /www;</span><br><span class="line">    <span class="attribute">index</span> index.php index.html index.htm;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">location</span> /relation/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://multi_relation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /area/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://10.1.0.1:8080/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器中输入<a href="http://ip:8080/realtion/" target="_blank" rel="noopener">http://ip:8080/realtion/</a> 访问的就是ngnix这台机器上端口为20000的这个服务；</p><p>浏览器中输入<a href="http://ip:8080/area/" target="_blank" rel="noopener">http://ip:8080/area/</a> 访问的就是<a href="http://10.1.0.1:8080/" target="_blank" rel="noopener">http://10.1.0.1:8080/</a> 这个服务;</p><p>可以看出，ngnix配置反向代理，也是一种解决<strong>浏览器跨域问题</strong>的方法(在10.1.0.1:8080的这个服务，在 ip:8080这个域下用js是访问不了的，因为跨域了，但是配置了反向代理以后，用ip:8080/area/ 就能访问到了，^_^)。</p><h4 id="遇到的问题，静态资源访问404"><a href="#遇到的问题，静态资源访问404" class="headerlink" title="遇到的问题，静态资源访问404"></a>遇到的问题，静态资源访问404</h4><p>如下是实际中的一个配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> multi_relation &#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:20000</span> weight=<span class="number">1</span> max_fails=<span class="number">5</span> fail_timeout=<span class="number">6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">root</span> /www;</span><br><span class="line">    <span class="attribute">index</span> index.php index.html index.htm;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">location</span> /relation/ &#123;</span><br><span class="line">    <span class="comment">#[规则1]</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://multi_relation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .*.(css|js|png|gif|jpg)$</span> &#123;</span><br><span class="line">        <span class="comment">#[规则2]</span></span><br><span class="line">    <span class="attribute">access_log</span>   <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">expires</span>      <span class="number">30d</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<a href="http://ip:8080/relation/" target="_blank" rel="noopener">http://ip:8080/relation/</a> 的时候，静态资源都报404错误。</p><p>对于127.0.0.1:20000的这个服务，它的静态资源可能在127.0.0.1:20000/static/ 下，做了反向代理以后，我们请求 <a href="http://ip:8080/relation/static/test.js" target="_blank" rel="noopener">http://ip:8080/relation/static/test.js</a> , ngnix匹配/relation/以后，就会知道去127.0.0.1:20000这个服务去拿资源</p><p>但是因为还有规则2，匹配到规则1以后，继续往下搜索，又匹配了规则2，所以ngnix会对匹配规则2的url做规则2的处理，这个时候，静态资源就找不到了，因为ip:8080/relation/下实际上没有/static/test.js这个资源；</p><p>所以，如果是单独的服务做反向代理的时候，别忘了加上^~ ，规则1修改为</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /relation/ &#123;</span><br><span class="line">  <span class="comment"># 规则1 匹配到 /relation/ 开头的地址，停止往下搜索</span></span><br><span class="line">  <span class="attribute">proxy_pass</span> http://multi_relation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样<a href="http://ip:8080/relation/static/test.js" target="_blank" rel="noopener">http://ip:8080/relation/static/test.js</a> 匹配到规则1以后，就不会去匹配规则2啦～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单介绍了ngnix的location的配置和反向代理的配置。配置ngnix反向代理，也是一种解决前端跨域访问的方法。另外还介绍了在实际使用中，由于配置其他服务的反向代理，导致静态资源获取404的问题总结。&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="http://lucyhao.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="ngnix配置" scheme="http://lucyhao.com/tags/ngnix%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>web地图前端入门知识小总结</title>
    <link href="http://lucyhao.com/2016/01/26/web%E5%9C%B0%E5%9B%BE%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://lucyhao.com/2016/01/26/web地图前端入门知识小总结/</id>
    <published>2016-01-26T05:26:55.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>神奇的转入与地图相关的工作，总结下最基础的行业知识；主要是怕我自己忘了，另外也不知道以后还会不会用到～ 内容包括墨卡托投影，墨卡托坐标与经纬度坐标之间的转换，以及常用的地图坐标之间的转换</p></blockquote><a id="more"></a> <h3 id="web墨卡托投影"><a href="#web墨卡托投影" class="headerlink" title="web墨卡托投影"></a>web墨卡托投影</h3><h5 id="什么是墨卡托投影？"><a href="#什么是墨卡托投影？" class="headerlink" title="什么是墨卡托投影？"></a>什么是墨卡托投影？</h5><blockquote><p>墨卡托(Mercator)投影，又名“等角正轴圆柱投影”，荷兰地图学家墨卡托（Mercator）在1569年拟定，假设地球被围在一个中空的圆柱里，其赤道与圆柱相接触，然后再假想地球中心有一盏灯，把球面上的图形投影到圆柱体上，再把圆柱体展开，这就是一幅标准纬线为零度（即赤道）的“墨卡托投影”绘制出的世界地图。</p></blockquote><p>上面摘自网络，稍微运用下你的空间想象力，就能想象出这个投影的过程。</p><h5 id="Web墨卡托投影坐标系"><a href="#Web墨卡托投影坐标系" class="headerlink" title="Web墨卡托投影坐标系"></a>Web墨卡托投影坐标系</h5><p>以整个世界范围，赤道作为标准纬线，本初子午线作为中央经线，两者交点为坐标原点，向东向北为正，向西向南为负。 </p><p>X轴：由于赤道半径为6378137米，则赤道周长为2<em>PI</em>r = 20037508.3427892，因此X轴的取值范围：[-20037508.3427892,20037508.3427892]。 </p><p>y轴：本来纬度接近90度的时候，y轴是接近无限，但是为了在web上好计算，y轴的取值范围也定为了[-20037508.3427892,20037508.3427892]</p><p>由上面的x轴和y轴的取值范围，反计算得到经纬度的取值范围为： </p><p>经度： [-180,180]</p><p>纬度： [-85.05112877980659，85.05112877980659]</p><p>是的，纬度没有达到90度，反正web上的地图，人们也不关心高纬度的情况，去到南极或者北极的时候，请使用专业地图。</p><h5 id="墨卡托坐标到经纬度坐标的转换-javascript"><a href="#墨卡托坐标到经纬度坐标的转换-javascript" class="headerlink" title="墨卡托坐标到经纬度坐标的转换 javascript"></a>墨卡托坐标到经纬度坐标的转换 javascript</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//墨卡托坐标转经纬度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mercator2lonLat</span>(<span class="params">mercatorX,mercatorY</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x=mercatorX/<span class="number">20037508.34</span>*<span class="number">180</span>;</span><br><span class="line">  <span class="keyword">var</span> y=mercatorY/<span class="number">20037508.34</span>*<span class="number">180</span>;</span><br><span class="line">  y= <span class="number">180</span>/<span class="built_in">Math</span>.PI*(<span class="number">2</span>*<span class="built_in">Math</span>.atan(<span class="built_in">Math</span>.exp(y*<span class="built_in">Math</span>.PI/<span class="number">180</span>))-<span class="built_in">Math</span>.PI/<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> [x,y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//经纬度转墨卡托</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lonLat2mercator</span>(<span class="params">lon, lat</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = (lon/<span class="number">180</span>) * <span class="number">20037508.34</span>;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(lat &gt; <span class="number">85.05112</span>)&#123; tmp = <span class="number">85.05112</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(lat &lt; <span class="number">-85.05112</span>)&#123; tmp = <span class="number">-85.05112</span>;&#125;</span><br><span class="line">    tmp = (<span class="built_in">Math</span>.PI / <span class="number">180.0</span>) * tmp;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20037508.34</span> * <span class="built_in">Math</span>.log(<span class="built_in">Math</span>.tan(<span class="built_in">Math</span>.PI / <span class="number">4.0</span> + tmp / <span class="number">2.0</span>)) / <span class="built_in">Math</span>.PI;</span><br><span class="line">    <span class="keyword">return</span> [x,y];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有时候，前端获取到的坐标并不是标准的经纬度，可能是墨卡托坐标(因为后台程序用墨卡托可以直接加减运算，方便)。所以在使用的时候，如果经度不在［-180,180］之间，纬度简单判断不在[-90,90]之间，并且数据还很大的可以认为有可能是墨卡托，需要做一下转换。</p><h3 id="百度、腾讯、高德的坐标体系"><a href="#百度、腾讯、高德的坐标体系" class="headerlink" title="百度、腾讯、高德的坐标体系"></a>百度、腾讯、高德的坐标体系</h3><p>各家使用的坐标都是经过一些偏移的，然后国内因为一些保密原因，国内的地图是不让使用GPS坐标的。不过高德，腾讯使用的是一个坐标系，百度是另外一个。所以同一个经纬度在每家地图上的位置可能会有一些偏差，那怎么办？就好像做搜索，需要看别家搜索的质量。做地图，也需要知道别家的数据。</p><ul><li>腾讯开放平台提供的坐标转换：<a href="http://lbs.qq.com/webservice_v1/guide-convert.html" target="_blank" rel="noopener">http://lbs.qq.com/webservice_v1/guide-convert.html</a></li></ul><p>​        可以得到GPS坐标、百度经纬度等</p><ul><li><p>百度开放平台提供的坐标转换：<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/changeposition" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=webapi/guide/changeposition</a></p><p>可以得到的坐标要多一些，aliyun地图就是高德地图啦，腾讯，google，高德的地图的坐标系都是一样的</p></li><li><p>高德的，实在没找到，囧～个人觉得高德的开放平台那个web页实在是有点不好找，交互和UI实在有点小乱</p><p>​</p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;神奇的转入与地图相关的工作，总结下最基础的行业知识；主要是怕我自己忘了，另外也不知道以后还会不会用到～ 内容包括墨卡托投影，墨卡托坐标与经纬度坐标之间的转换，以及常用的地图坐标之间的转换&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://lucyhao.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="web地图" scheme="http://lucyhao.com/tags/web%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>利用gulp实现前端代码的合并压缩</title>
    <link href="http://lucyhao.com/2016/01/14/%E5%88%A9%E7%94%A8gulp%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E5%90%88%E5%B9%B6%E5%8E%8B%E7%BC%A9/"/>
    <id>http://lucyhao.com/2016/01/14/利用gulp实现前端代码的合并压缩/</id>
    <published>2016-01-14T06:33:28.000Z</published>
    <updated>2018-01-08T06:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>把之前一篇15年的文章移动过来～</p></blockquote><h3 id="gulp是什么"><a href="#gulp是什么" class="headerlink" title="gulp是什么?"></a>gulp是什么?</h3><p>看它的图标就是一杯可乐啊！</p><p>基于任务(流式)的自动化构建工具, 它能够自动完成js/css/sass/less等文件的测试, 检查, 压缩, 合并等工作. 众所周知, 前端的静态文件, 在上线前合并压缩是必不可少的. 给文件加上”版本号”, 防止浏览器缓存也是需要的, 不然修改了代码, 还需要用户不断的F5才能更新代码, 估计这个项目也就game over了. </p><p>工欲善其事,必先利其器; 这句话对于研发来说,真的是再合适不过. 而gulp就是这样的利器.</p><a id="more"></a><h3 id="那如何来安装使用gulp呢"><a href="#那如何来安装使用gulp呢" class="headerlink" title="那如何来安装使用gulp呢?"></a>那如何来安装使用gulp呢?</h3><ul><li><p>安装node环境 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">地址</a></p></li><li><p>安装 gulp <code>$ npm install -g gulp</code></p></li><li><p>在项目 根目录下，新建文件 gulpfile.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//写两句代码看看，比如console.log("hello world");</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li>运行 <code>$ gulp</code></li></ul><h3 id="如何做合并压缩？"><a href="#如何做合并压缩？" class="headerlink" title="如何做合并压缩？"></a>如何做合并压缩？</h3><p>gulp运行起来了，我们真正的目的是要做合并压缩，如何来做？gulp为我们提供了很多的插件，它还有严格的插件机制保证插件为我们所用，gulp的API也是足够简单，4个API可以搞定绝大多数。</p><p>gulp的插件可以从这里寻找<a href="http://gulpjs.com/plugins/" target="_blank" rel="noopener">http://gulpjs.com/plugins/</a></p><ol><li>压缩CSS：gulp-minify-css</li><li>压缩js : gulp-uglify</li><li>合并js: gulp-concat</li><li>压缩图片：gulp-imagemin</li><li>替换html中相应的文件块：gulp-useref</li><li>文件名加MD5后缀：gulp-rev</li><li>利用gulp-rev生成的manifest.json表替换html中的css和js引用：gulp-rev-replace</li></ol><blockquote><p>注：gulp-useref ，gulp-rev, gulp-rev-replace一般都是连用，他们三个的功能就是，把html文件中加了特定注释的文件区块进行合并，然后gulp-rev对文件加上md5，生存manifest.json，gulp-rev-replace再根据manifest.json文件替换html中对应的路径</p></blockquote><p> gulp有很多插件，选择适合自己项目的，安装到项目中,在gulpfile.js中使用它们</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install --save-dev gulp-minify-css gulp-uglify gulp-concat gulp-rev gulp-rev-replace gulp-useref</span><br></pre></td></tr></table></figure><h5 id="举个例子：合并压缩test-html文件中js文件并进行文件替换"><a href="#举个例子：合并压缩test-html文件中js文件并进行文件替换" class="headerlink" title="举个例子：合并压缩test.html文件中js文件并进行文件替换"></a>举个例子：合并压缩test.html文件中js文件并进行文件替换</h5><p>test.html文件如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- build:js(&#123;.tmp,src&#125;) dist_test/js/main-combo.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>gulpfile.js文件如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),       </span><br><span class="line">uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</span><br><span class="line">rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>),</span><br><span class="line">revReplace = <span class="built_in">require</span>(<span class="string">'gulp-rev-replace'</span>),</span><br><span class="line">useref = <span class="built_in">require</span>(<span class="string">'gulp-useref'</span>),</span><br><span class="line">concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line">gulp.task(<span class="string">'test-js'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src([<span class="string">"a.js"</span>,<span class="string">"b.js"</span>])</span><br><span class="line">.pipe(uglify())</span><br><span class="line">.pipe(concat(<span class="string">'main-combo.js'</span>))</span><br><span class="line">.pipe(rev())</span><br><span class="line">.pipe(gulp.dest(<span class="string">"dist_test/js"</span>))</span><br><span class="line">.pipe(rev.manifest())</span><br><span class="line">.pipe(gulp.dest(<span class="string">"dist_test"</span>));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'test'</span>, [<span class="string">"test-js"</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> manifest = gulp.src(<span class="string">"dist_test/rev-manifest.json"</span>);</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">'test.html'</span>)</span><br><span class="line">.pipe(useref())</span><br><span class="line">.pipe(revReplace(&#123;<span class="attr">manifest</span>: manifest&#125;))</span><br><span class="line">.pipe(gulp.dest(<span class="string">"dist_test"</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>生成的项目目录如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dist_test</span><br><span class="line">     js</span><br><span class="line">         main-combo-519cd1e2de.js</span><br><span class="line">     rev-manifest.json</span><br><span class="line">     test.html</span><br><span class="line">test.html</span><br><span class="line">a.js</span><br><span class="line">b.js</span><br></pre></td></tr></table></figure><p>dist_test下的test.html的文件内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist_test/js/main-combo-519cd1e2de.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>好了，dist_test就是我们需要上线的文件了~</p><blockquote><p>PS：关于gulp-rev-replace的应用官方的例子我死活没有跑通，不知道什么原因，useref.assets()报错，console.log了下useref,居然没看到assets，所以用了上面提到的方法~</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>);</span><br><span class="line"><span class="keyword">var</span> revReplace = <span class="built_in">require</span>(<span class="string">'gulp-rev-replace'</span>);</span><br><span class="line"><span class="keyword">var</span> useref = <span class="built_in">require</span>(<span class="string">'gulp-useref'</span>);</span><br><span class="line"><span class="keyword">var</span> filter = <span class="built_in">require</span>(<span class="string">'gulp-filter'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> csso = <span class="built_in">require</span>(<span class="string">'gulp-csso'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"index"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> jsFilter = filter(<span class="string">"**/*.js"</span>);</span><br><span class="line"><span class="keyword">var</span> cssFilter = filter(<span class="string">"**/*.css"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userefAssets = useref.assets();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">"src/index.html"</span>)</span><br><span class="line"> .pipe(userefAssets)      <span class="comment">// Concatenate with gulp-useref </span></span><br><span class="line"> .pipe(jsFilter)</span><br><span class="line"> .pipe(uglify())             <span class="comment">// Minify any javascript sources </span></span><br><span class="line"> .pipe(jsFilter.restore())</span><br><span class="line"> .pipe(cssFilter)</span><br><span class="line"> .pipe(csso())               <span class="comment">// Minify any CSS sources </span></span><br><span class="line"> .pipe(cssFilter.restore())</span><br><span class="line"> .pipe(rev())                <span class="comment">// Rename the concatenated files </span></span><br><span class="line"> .pipe(userefAssets.restore())</span><br><span class="line"> .pipe(useref())</span><br><span class="line"> .pipe(revReplace())         <span class="comment">// Substitute in new filenames </span></span><br><span class="line"> .pipe(gulp.dest(<span class="string">'public'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;把之前一篇15年的文章移动过来～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;gulp是什么&quot;&gt;&lt;a href=&quot;#gulp是什么&quot; class=&quot;headerlink&quot; title=&quot;gulp是什么?&quot;&gt;&lt;/a&gt;gulp是什么?&lt;/h3&gt;&lt;p&gt;看它的图标就是一杯可乐啊！&lt;/p&gt;
&lt;p&gt;基于任务(流式)的自动化构建工具, 它能够自动完成js/css/sass/less等文件的测试, 检查, 压缩, 合并等工作. 众所周知, 前端的静态文件, 在上线前合并压缩是必不可少的. 给文件加上”版本号”, 防止浏览器缓存也是需要的, 不然修改了代码, 还需要用户不断的F5才能更新代码, 估计这个项目也就game over了. &lt;/p&gt;
&lt;p&gt;工欲善其事,必先利其器; 这句话对于研发来说,真的是再合适不过. 而gulp就是这样的利器.&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://lucyhao.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="gulp" scheme="http://lucyhao.com/tags/gulp/"/>
    
      <category term="nodeJs" scheme="http://lucyhao.com/tags/nodeJs/"/>
    
  </entry>
  
  <entry>
    <title>come back</title>
    <link href="http://lucyhao.com/2016/01/13/come%20back/"/>
    <id>http://lucyhao.com/2016/01/13/come back/</id>
    <published>2016-01-13T03:37:06.000Z</published>
    <updated>2018-05-28T06:34:46.685Z</updated>
    
    <content type="html"><![CDATA[<p> 之前的博客一直都在  cnblog 上，一直都没有迁移，然后经过一个神奇的15年之后，博客又重新开张了～之前的移过来太麻烦，给一个列表</p><ul><li><p>12-01-13 <a href="http://www.cnblogs.com/lilyimage/archive/2012/01/13/2321950.html" target="_blank" rel="noopener">[译]使用html5的语义标签</a> </p></li><li><p>12-01-31 <a href="http://www.cnblogs.com/lilyimage/archive/2012/01/31/2333262.html" target="_blank" rel="noopener">html结构</a></p></li><li><p>12-02-20 <a href="http://www.cnblogs.com/lilyimage/archive/2012/02/20/2359545.html" target="_blank" rel="noopener">利用filter进行图片的旋转</a></p></li><li><p>12-02-20 <a href="http://www.cnblogs.com/lilyimage/archive/2012/02/20/2360323.html" target="_blank" rel="noopener">检测浏览器是否有filter属性</a> </p></li></ul><a id="more"></a> <ul><li><p>12-03-07 <a href="http://www.cnblogs.com/lilyimage/archive/2012/03/07/2383173.html" target="_blank" rel="noopener">[译]6 Best HTML5/CSS3 Presentation Frameworks</a> </p></li><li><p>12-03-15 <a href="http://www.cnblogs.com/lilyimage/archive/2012/03/15/2398502.html" target="_blank" rel="noopener">浏览器是如何工作的</a></p></li><li><p>12-03-21 <a href="http://www.cnblogs.com/lilyimage/archive/2012/03/21/2410357.html" target="_blank" rel="noopener">JQuery的结构-Dive into jQuery</a></p></li><li><p>12-04-12 <a href="http://www.cnblogs.com/lilyimage/archive/2012/04/12/2443933.html" target="_blank" rel="noopener">对于初学者有效的JavaScript设计模式</a></p></li><li><p>12-04-12 <a href="http://www.cnblogs.com/lilyimage/archive/2012/04/12/2443944.html" target="_blank" rel="noopener">对于初学者有效的JavaScript设计模式（2）</a></p></li><li><p>12-05-29 <a href="http://www.cnblogs.com/lilyimage/archive/2012/05/29/2523935.html" target="_blank" rel="noopener">实训项目“你画我猜”总结_前端篇</a></p></li><li><p>12-07-03 <a href="http://www.cnblogs.com/lilyimage/archive/2012/07/03/2443951.html" target="_blank" rel="noopener">对于初学者有效的JavaScript设计模式（3）</a></p></li><li><p>12-07-04 <a href="http://www.cnblogs.com/lilyimage/archive/2012/07/04/2576566.html" target="_blank" rel="noopener">对于初学者有效的JavaScript设计模式（4）</a></p></li><li><p>12-07-09 <a href="http://www.cnblogs.com/lilyimage/archive/2012/07/09/2583062.html" target="_blank" rel="noopener">文件上传_HTML5与SWFUpload（1）</a></p></li><li><p>12-07-20 <a href="http://www.cnblogs.com/lilyimage/archive/2012/07/20/2601535.html" target="_blank" rel="noopener">使用HTML5的语义标签</a></p></li><li><p>12-07-24 <a href="http://www.cnblogs.com/lilyimage/archive/2012/07/24/2605510.html" target="_blank" rel="noopener">文件上传_HTML5与SWFUpload（2）</a></p></li><li><p>12-09-04 <a href="http://www.cnblogs.com/lilyimage/archive/2012/09/04/2670640.html" target="_blank" rel="noopener">Ajax同步发送、字符串按步长截断</a></p></li><li><p>13-03-12 <a href="http://www.cnblogs.com/lilyimage/archive/2013/03/12/2956009.html" target="_blank" rel="noopener">在线播放视频</a></p></li><li><p>13-06-13 <a href="http://www.cnblogs.com/lilyimage/archive/2013/06/13/3134071.html" target="_blank" rel="noopener">优化JS的一些小tip</a> </p></li><li><p>13-09-13 <a href="http://www.cnblogs.com/lilyimage/p/3318895.html" target="_blank" rel="noopener">手机上的页面转换page slider</a></p></li><li><p>13-09-22 <a href="http://www.cnblogs.com/lilyimage/p/3333523.html" target="_blank" rel="noopener">利用box-flex实现 dom元素位置页面底部</a></p></li><li><p>13-10-11 <a href="http://www.cnblogs.com/lilyimage/p/3363632.html" target="_blank" rel="noopener">有效的PhoneGap CSS: WebKit Tap Highlight Color</a></p></li><li><p>13-11-06 <a href="http://www.cnblogs.com/lilyimage/p/3410967.html" target="_blank" rel="noopener">app内嵌web的一些问题记录</a></p></li><li><p>14-02-26 <a href="http://www.cnblogs.com/lilyimage/p/3568773.html" target="_blank" rel="noopener">[译]FastClick: native-like tapping for touch apps</a></p></li><li><p>14-04-09 <a href="http://www.cnblogs.com/lilyimage/p/3653864.html" target="_blank" rel="noopener">[译]line clampin让文字在指定的行数内省略号显示</a></p></li><li><p>14-04-23 <a href="http://www.cnblogs.com/lilyimage/p/3682810.html" target="_blank" rel="noopener">[译]flexbox全揭秘</a></p></li><li><p>14-05-22 <a href="http://www.cnblogs.com/lilyimage/p/3740668.html" target="_blank" rel="noopener">fastclick与zepto的 tap事件关于在手机上click事件的300ms延迟的区别</a></p></li><li><p>14-06-23 <a href="http://www.cnblogs.com/lilyimage/p/3785316.html" target="_blank" rel="noopener">zepto-selector.js简单分析</a></p></li><li><p>14-08-06 <a href="http://www.cnblogs.com/lilyimage/p/3892500.html" target="_blank" rel="noopener">利用CSS实现带相同间隔地无缝滚动动画</a></p></li><li><p>14-09-02 <a href="http://www.cnblogs.com/lilyimage/p/3951016.html" target="_blank" rel="noopener">mobile touch事件</a> </p></li><li><p>14-10-29 <a href="http://www.cnblogs.com/lilyimage/p/4059712.html" target="_blank" rel="noopener">基于zepto判断mobile的横竖屏状态</a></p></li><li><p>14-11-10 <a href="http://www.cnblogs.com/lilyimage/p/4086869.html" target="_blank" rel="noopener">巧妙利用before和after伪类实现文字的展开和收起</a></p></li><li><p>14-12-11 <a href="http://www.cnblogs.com/lilyimage/p/4158277.html" target="_blank" rel="noopener">利用flexbox实现按字符长度排列dom元素</a></p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 之前的博客一直都在  cnblog 上，一直都没有迁移，然后经过一个神奇的15年之后，博客又重新开张了～之前的移过来太麻烦，给一个列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;12-01-13 &lt;a href=&quot;http://www.cnblogs.com/lilyimage/archive/2012/01/13/2321950.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[译]使用html5的语义标签&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;12-01-31 &lt;a href=&quot;http://www.cnblogs.com/lilyimage/archive/2012/01/31/2333262.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;html结构&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;12-02-20 &lt;a href=&quot;http://www.cnblogs.com/lilyimage/archive/2012/02/20/2359545.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;利用filter进行图片的旋转&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;12-02-20 &lt;a href=&quot;http://www.cnblogs.com/lilyimage/archive/2012/02/20/2360323.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;检测浏览器是否有filter属性&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://lucyhao.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="html" scheme="http://lucyhao.com/tags/html/"/>
    
  </entry>
  
</feed>
